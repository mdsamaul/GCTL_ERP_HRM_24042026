(function ($) {
    $.patientTypes = function (options) {
        var settings = $.extend({
            baseUrl: "/",
            companyIds: ".companySelect",
            LoanAutoId:"#loanAutoId",
            EmployeeIds: ".employeeSelect",
            EmployeeName:".EmployeeName",
            EmployeeDesignation:".EmployeeDesignation",
            EmployeeDepartment:".EmployeeDepartment",
            EmployeeJoinDate: ".EmployeeJoinDate",
            PaymentType:"#paymentLoanSelect",
            LoanDate:".loanDate",
            PaymentLoanDate:".PaymentLoanDate",
            EndDate:"#endDate",
            InstStartDate:".instStartDate",
            LoanAmount: ".loanAmount",
            PaymentLoanAmount:".paymentLoanAmount",
            PaymentMode: ".paymentMode",
            PaymentReceivePaymentMode: ".paymentReceivePaymentMode",
            AmountWorningMessage: ".amountWorningMessage",
            DeductionHead: "#DeductionHead",
            LoanIdAutoGenerate: "#LoanIdAutoGenerate",
            LoanEntryBtn: ".js-loan-entry-report-save",
            NoOfInstallment: "#noOfInstallment",
            MonthlyDeduction: "#monthlyDeduction",
            Remarks: "#remarks",
            ReasonOfLoanTaken: "#ReasonOfLoanTaken",
            PaymentRemarks: ".paymentRemarks",
            ChequeDate: ".chequeDate",
            PaymentCheckDate: ".paymentCheckDate",
            BankAccount: ".bankAccount",
            PaymentBankAccount: ".paymentBankAccount",
            Bank: ".Bank",
            PaymentBank: ".paymentBank",
            ChequeNo: ".chequeNo",
            PaymentCheckNo: ".paymentCheckNo",
            IfCheque: ".if_cheque",
            IfWairTransferThenHide: ".if_wair-transfer-then-hide",
            ClearAll: "#js-loan-entry-report-clear",
            CreateDate: ".createDate",
            UpdateDate: ".updateDate",
            CheckAll: "#checkAll",
            CheckPaymentAll:"#paymentReceiveCheckAll",
            BodyCheckBox: "#payrollLoanChcekboxBody",
            deleteLoanBtn: "#js-loan-entry-delete-confirm",
            PRInfoCompanySelect: "#PRInfocompanySelect",
            PaymentReceiveInfoTab: "#PaymentReceiveInfo-tab",
            LoanEntryTab: "#LoanEntry-tab",
            EmployeeSelectLoanId: ".employeeSelectLoanId",
            LoanDateShow: ".LoanDate",
            LoanType: ".LoanType",
            LoanAmountShow: ".LoanAmountText",
            LoanStartEndDate: ".LoanStartEndDate",
            LoanNoOfInstallment: ".LoanNoOfInstallment",
            PaymentReceiveEmployeeSelect: ".PaymentReceiveEmployeeSelect",
            PaymentReceiveCompanySelect: ".PaymentReceiveCompanySelect",
            PaymentReceiveIdAutoGenerate: "#PaymentReceiveIdAutoGenerate",
            PaymentReceiveAutoId:"#paymentReceiveAutoId",
        }, options);
        var filterUrl = settings.baseUrl + "/GetFilterData";
        var paymentReceiveUrl = settings.baseUrl + "/GetFilterPaymentReceive";
        var GetAllPaymentReceiveUrl = settings.baseUrl + "/GetPaymentReceive";
        var employeeByIdUrl = settings.baseUrl + "/GetEmpById";
        var PaymentReceiveGetEmpByIdUrl = settings.baseUrl + "/PaymentReceiveGetEmpById";
        var paymentTypeUrl = settings.baseUrl + "/getLoanType";
        var paymentModeUrl = settings.baseUrl + "/GetPaymentMode";
        var payHeadDeductionUrl = settings.baseUrl + "/getPayHeadDeduction";
        var createLoanId = settings.baseUrl + "/CreateLoanId";
        var bankUrl = settings.baseUrl + "/GetBank";
        var createEditLoanUrl = settings.baseUrl + "/CreateEditLoan";
        var getLoanDataUrl = settings.baseUrl + "/GetLoanData";
        var deleteLoanUrl = settings.baseUrl + "/DeleteLoans";
        var DeletePaymentReceiveUrl = settings.baseUrl + "/DeletePaymentReceive";
        var getLoanIdUrl = settings.baseUrl + "/GetLoanId";
        var autoGeneratedpaymentReceiveIdUrl = settings.baseUrl + "/GetPaymentAutoId";
        var CreateEditPaymentReceiveUrl = settings.baseUrl + "/CreateEditPaymentReceive";
        var GetPaymentReceiveByIdUrl = settings.baseUrl + "/GetPaymentReceiveById";
        var ValidPaymentAmountUrl = settings.baseUrl + "/ValidPaymentAmount";
        var setupLoadingOverlay = function () {
            if ($("#customLoadingOverlay").length === 0) {
                $("body").append(`
                    <div id="customLoadingOverlay" style="
                        display: none;
                        position: fixed;
                        top: 0;
                        left: 0;
                        width: 100%;
                        height: 100%;
                        background-color: rgba(0, 0, 0, 0.5);
                        z-index: 9999;
                        justify-content: center;
                        align-items: center;">
                        <div style="
                            background-color: white;
                            padding: 20px;
                            border-radius: 5px;
                            box-shadow: 0 0 10px rgba(0,0,0,0.3);
                            text-align: center;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                            <p style="margin-top: 10px; margin-bottom: 0;">Loading data...</p>
                        </div>
                    </div>
                `);
            }
        };

        function showLoading() {
            $("#customLoadingOverlay").css("display", "flex");
        }

        function hideLoading() {
            $("#customLoadingOverlay").hide();
        }

       

        function showToast(iconType, message) {
            const Toast = Swal.mixin({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                showClass: {
                    popup: 'swal2-show swal2-fade-in'
                },
                hideClass: {
                    popup: 'swal2-hide swal2-fade-out'
                }
            });

            Toast.fire({
                icon: iconType,
                title: message
            });
        }

        var initializeMultiselects = function () {
            var selectors = [
                settings.companyIds,
                settings.EmployeeIds,
                settings.PaymentType,
                settings.PaymentMode,
                settings.DeductionHead,
                settings.Bank,
                settings.PRInfoCompanySelect,
                settings.EmployeeSelectLoanId,
                settings.PaymentReceiveEmployeeSelect,
                settings.PaymentReceiveCompanySelect,
            ].join(", ");
            $(selectors).multiselect({
                enableFiltering: true,
                includeSelectAllOption: true,
                selectAllText: 'Select All',
                //nonSelectedText: '--Select items--',
                nSelectedText: 'Selected',
                allSelectedText: 'All Selected',
                filterPlaceholder: 'Search.........',
                buttonWidth: '100%',
                maxHeight: 350,
                enableClickableOptGroups: true,
                dropUp: false,
                numberDisplayed: 1,
                enableCaseInsensitiveFiltering: true,                  
            });
        };
        var toArray = function (value) {
            if (!value) return [];
            if (Array.isArray(value)) return value;
            return [value];
        };
        var getFilterValue = function () {
            var filterData = {
                CompanyCodes: toArray($(settings.companyIds).val()),
                EmployeeIds: toArray($(settings.EmployeeIds).val())
            };
            return filterData;
        }
        function formatDate(inputDate) {
            if (!inputDate) return null;
            const parts = inputDate.split('/');
            return `${parts[2]}-${parts[1]}-${parts[0]}`; // yyyy-MM-dd
        }
        function submitLoanData() {
            var data = {
                AutoId: $(settings.LoanAutoId).val() || 0,
                LoanId: $(settings.LoanIdAutoGenerate).val() || '',
                EmployeeId: $(settings.EmployeeIds).val() || $(settings.PaymentReceiveEmployeeSelect).val() || '',                
                LoanTypeId: $(settings.PaymentType).val() || '',
                LoanAmount: $(settings.LoanAmount).val() || $(settings.PaymentLoanAmount).val() || 0,
                NoOfInstallment: $(settings.NoOfInstallment).val() || '',
                MonthlyDeduction: $(settings.MonthlyDeduction).val() || 0,
                PayHeadNameId: $(settings.DeductionHead).val() || '',
                PaymentModeId: $(settings.PaymentMode).val() || '',
                ChequeNo: $(settings.ChequeNo).val() || '',              
                BankId: $(settings.Bank).val() || '',
                BankAccount: $(settings.BankAccount).val() || '',
                Remarks: $(settings.Remarks).val() || '',
                ReasonOfLoanTaken: $(settings.ReasonOfLoanTaken).val() || '',
                CompanyCode: $(settings.companyIds).val() || '',
                LoanDate: formatDate($(settings.LoanDate).val())||null,
                StartDate: formatDate($(settings.InstStartDate).val()) || null,
                EndDate: formatDate($(settings.EndDate).val()) || null,
                ChequeDate: formatDate($(settings.ChequeDate).val()) || null,
                PaymentId: $(settings.PaymentReceiveIdAutoGenerate).val() || '',
            };
            return data;
        }





        var clearLoanForm = function (skipRebuild) {          
            $(settings.LoanAmount).val('');
            $(settings.PaymentLoanAmount).val('');
            $(settings.NoOfInstallment).val('');
            $(settings.MonthlyDeduction).val('');
            $(settings.ChequeNo).val('');
            $(settings.BankAccount).val('');
            $(settings.Remarks).val('');
            $(settings.ReasonOfLoanTaken).val('');
            $(settings.EmployeeName).text('');
            $(settings.EmployeeDesignation).text('');
            $(settings.EmployeeDepartment).text('');
            $(settings.EmployeeJoinDate).text('');
            $(settings.LoanDate).val(getTodayDate());
            $(settings.InstStartDate).val(getTodayDate());
            $(settings.EndDate).val(getTodayDate());
            $(settings.ChequeDate).val(getTodayDate());
            $(settings.LoanAutoId).val(0);

            $(settings.DeductionHead).val('0');
            $(settings.PaymentMode).val('001');
            $(settings.Bank).val('0');
            $(settings.PaymentType).val('0');
            $(settings.EmployeeIds).val('');
            $(settings.PaymentReceiveEmployeeSelect).val('');
            $(settings.EmployeeSelectLoanId).val('');
            $(settings.PaymentRemarks).val('');

            $(settings.LoanDateShow).text('');
            $(settings.LoanType).text('');
            $(settings.LoanAmountShow).text('');
            $(settings.LoanStartEndDate).text('');
            $(settings.LoanNoOfInstallment).text('');
            $(settings.CreateDate).text('');
            $(settings.UpdateDate).text('');
            $(settings.PaymentReceiveAutoId).val(''); 

            if (!skipRebuild) {
                setTimeout(function () {
                    $(settings.DeductionHead).multiselect('rebuild');
                    $(settings.PaymentMode).multiselect('rebuild');
                    $(settings.Bank).multiselect('rebuild');
                    $(settings.PaymentType).multiselect('rebuild');
                    $(settings.EmployeeIds).multiselect('rebuild');
                    $(settings.PaymentReceiveEmployeeSelect).multiselect('rebuild');
                    $(settings.EmployeeSelectLoanId).multiselect('rebuild');

                }, 50);
            }
            $(settings.IfWairTransferThenHide).fadeOut(500);
            $(settings.IfCheque).fadeOut(500);
        };
         let paymentTab = false;
        $(document).on('click', settings.LoanEntryTab, function () {
            paymentTab = false;
            clearLoanForm(false);   
            $(settings.IfWairTransferThenHide).fadeOut(500);
            $(settings.IfCheque).fadeOut(500);
        });
       
        $(document).on('click', settings.PaymentReceiveInfoTab, function () {
            paymentTab = true;
            clearLoanForm(true); 
            loadPaymentReceiveData();
            ReceiveLoan();
            createPaymentReceiveAutoGenareted();
            $(settings.IfWairTransferThenHide).fadeOut(500);
            $(settings.IfCheque).fadeOut(500);
            $(settings.LoanAmount).css('border', '');
            $(settings.AmountWorningMessage).stop(true, true).fadeOut(500);
            LoadAllPaymentReceive();
        });

        function getTodayDate() {
            var d = new Date();
            var day = ('0' + d.getDate()).slice(-2);
            var month = ('0' + (d.getMonth() + 1)).slice(-2);
            var year = d.getFullYear();
            return day + '/' + month + '/' + year;
        }
        $(document).on('click', settings.ClearAll, function () {
            clearLoanForm();
        })


        var loadFilterData = function () {
            var filterData = getFilterValue();
            $.ajax({
                url: filterUrl,
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(filterData),
                success: function (res) {
                    $(settings.companyIds, settings.EmployeeIds).off('change');
                    const data = res.data;
                    
                    if (data.company && data.company.length > 0 && data.company.some(x => x.code != null && x.name != null)) {
                        var companies = data.company;
                        var optCompany = $(settings.companyIds);
                        $.each(companies, function (index, company) {
                            if (company.code != null && company.name != null && company.name != "" && optCompany.find(`option[value="${company.code}"]`).length === 0) {
                                optCompany.append(`<option value="${company.code}">${company.name}</option>`)
                            }
                        });
                        optCompany.multiselect('rebuild');
                    }
                    if (data.employees && data.employees.length > 0 && data.employees.some(x => x.code != null && x.name != null)) {
                        var Employees = data.employees;
                        var optEmployee = $(settings.EmployeeIds);
                        $.each(Employees, function (index, employee) {
                            if (employee.code != null && employee.name != null && employee.name != "" && optEmployee.find(`option[value="${employee.code}"]`).length === 0) {
                                optEmployee.append(`<option value="${employee.code}">${employee.name} (${employee.code})</option>`)
                            }
                        });
                        optEmployee.multiselect('rebuild');
                    }
                },
                error: function (e) {
                    showToast('error', e.message);
                }
            });
        }
        $(document).on('change', settings.EmployeeIds, function () {
            var empId = $(this).val();
            if (empId) {
                $.ajax({
                    url: employeeByIdUrl + "?empId=" + encodeURIComponent(empId),
                    type: "GET",
                    success: function (res) {
                        $(settings.EmployeeName).text(res.data.name);
                        $(settings.EmployeeDesignation).text(res.data.designationName);
                        $(settings.EmployeeDepartment).text(res.data.departmentName);
                        $(settings.EmployeeJoinDate).text(res.data.joinDate);
                    },
                    error: function (e) {
                        showToast('error', e.message);
                    }
                });
            }
        });
        var loadPaymentReceiveData = function () {
            var filterData = getFilterValue();
            $.ajax({
                url: paymentReceiveUrl,
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(filterData),
                success: function (res) {
                    $(settings.PaymentReceiveCompanySelect, settings.PaymentReceiveEmployeeSelect).off('change');
                    const data = res.data;
                    
                    if (data.company && data.company.length > 0 && data.company.some(x => x.code != null && x.name != null)) {
                        var companies = data.company;
                        var optCompany = $(settings.PaymentReceiveCompanySelect);
                        $.each(companies, function (index, company) {
                            if (company.code != null && company.name != null && company.name != "" && optCompany.find(`option[value="${company.code}"]`).length === 0) {
                                optCompany.append(`<option value="${company.code}">${company.name}</option>`)
                            }
                        });
                        optCompany.multiselect('rebuild');
                    }
                    if (data.employees && data.employees.length > 0 && data.employees.some(x => x.code != null && x.name != null)) {
                        var Employees = data.employees;
                        var optEmployee = $(settings.PaymentReceiveEmployeeSelect);
                        $.each(Employees, function (index, employee) {
                            if (employee.code != null && employee.name != null && employee.name != "" && optEmployee.find(`option[value="${employee.code}"]`).length === 0) {
                                optEmployee.append(`<option value="${employee.code}">${employee.name} (${employee.code})</option>`)
                            }
                        });
                        optEmployee.multiselect('rebuild');
                    }                  
                },
                error: function (e) {
                    showToast('error', e.message);
                }
            });
        }

        LoadAllPaymentReceive = function () {
            $.ajax({
                url: GetAllPaymentReceiveUrl,
                type: "GET",
                success: function (res) {
                    let paymentData = [];

                    res.data.forEach(function (item) {
                        paymentData = paymentData.concat(item);
                    });

                    // Destroy if already initialized
                    if ($.fn.DataTable.isDataTable('#employeeLoanTable')) {
                        $('#employeeLoanTable').DataTable().clear().destroy();
                    }


                    // Wait until DOM is ready and visible
                    setTimeout(function () {
                        $('#employeeLoanTable').DataTable({
                            data: paymentData,
                            scrollX: true,
                            autoWidth: false,
                            responsive: false,
                            columns: [
                                {
                                    data: null,
                                    orderable: false,
                                    searchable: false,
                                    render: function (data, type, row) {
                                        return `<input type="checkbox" class="row-checkbox" data-id="${row.autoId}" />`;
                                    }

                                },
                                //{ data: "paymentId" },
                                {
                                    data: 'paymentId',
                                    className: "text-center",
                                    render: function (data, type, row) {
                                        return `<a href="#" class="text-primary font-weight-bold view-payment-receive" data-id="${row.autoId}">${data}</a>`;
                                    }
                                },
                                { data: "showPaymentDate" },
                                { data: "paymentAmount" },
                                { data: "paymentMode" },
                                { data: "remarks" },
                                { data: "loanId" },
                                { data: "empId" },
                                { data: "empName" },
                                { data: "designation" }
                            ],
                            columnDefs: [
                                { width: "60px", targets: 0 },
                                { width: "100px", targets: 1 },
                                { width: "120px", targets: 2 },
                                { width: "120px", targets: 3 },
                                { width: "120px", targets: 4 },
                                { width: "150px", targets: 5 },
                                { width: "100px", targets: 6 },
                                { width: "120px", targets: 7 },
                                { width: "180px", targets: 8 },
                                { width: "150px", targets: 9 },

                                { className: "text-center", targets: [0, 1, 2, 3, 4,  6, 7] },
                                { className: "text-left", targets: [5, 8, 9] }
                            ],
                            initComplete: function () {
                                let table = this.api();
                                setTimeout(function () {
                                    table.columns.adjust().draw();
                                }, 100); 
                            }
                        });
                    }, 50); 
                },                
                error: function (e) {
                    showToast('error', e.message);
                }
            });
        }

         //Edit get payment receive
        $("#employeeLoanTable").on('click', '.view-payment-receive', function (e) {
            e.preventDefault();
            var table = $('#employeeLoanTable').DataTable();
            var row = table.row($(this).closest('tr')).data();
            //todo
            selectPaymentAutoId = [];
            selectPaymentAutoId.push(row.autoId);
            $.ajax({
                url: PaymentReceiveGetEmpByIdUrl + "?empId=" + encodeURIComponent(row.empId),
                type: "GET",
                success: function (res) {
                    var empDropdown = $(settings.PaymentReceiveEmployeeSelect);
                    empDropdown.multiselect('deselectAll', false);
                    empDropdown.multiselect('select', row.empId); 
                    empDropdown.multiselect('rebuild'); 

                    var loanList = res.data.payrollLoanFilterResultDto;
                    $(settings.EmployeeName).text(loanList[0]?.name);
                    $(settings.EmployeeDesignation).text(loanList[0]?.designationName);
                    $(settings.EmployeeDepartment).text(loanList[0]?.departmentName);
                    $(settings.EmployeeJoinDate).text(loanList[0]?.joinDate);

                    var optLoans = $(settings.EmployeeSelectLoanId);
                    optLoans.empty();

                    if (loanList && loanList.length > 0 && loanList.some(x => x.code != null)) {
                        $.each(loanList, function (index, loan) {
                            if (loan.code != null) {
                                optLoans.append(`<option value="${loan.code}">${loan.code}</option>`);
                            }
                        });

                        optLoans.multiselect('rebuild');

                        if (row.loanId) {
                            optLoans.multiselect('select', row.loanId);
                        }
                    }
                }
            });

            $.ajax({
                url: getLoanIdUrl + "?loanId=" + encodeURIComponent(row.loanId),
                type: "GET",
                success: function (res) {
                    //debugger;
                    //console.log(res);
                    //var loanData = res.data;
                    //if (loanData.isComplete) {
                    //    showToast('success', loanData.message);
                    //    $(settings.LoanEntryBtn).prop('disabled', true);
                    //    $(settings.LoanAmountShow).prop('disabled', true);
                    //}
                    //$(settings.LoanEntryBtn).prop('disabled', false);
                    //$(settings.LoanAmountShow).prop('disabled', false);
                    var loanSelect = $(settings.EmployeeSelectLoanId);
                    loanSelect.multiselect('select', loanData.loanId);

                    $(settings.LoanDateShow).text(loanData.showLoanDate);
                    $(settings.LoanType).text(loanData.loanTypeName);
                    $(settings.LoanAmountShow).text(loanData.loanAmount);
                    $(settings.LoanStartEndDate).text(loanData.startShowDate + " - " + loanData.endShowDate);
                    $(settings.LoanNoOfInstallment).text(loanData.noOfInstallment);
                },
                error: function (e) {
                    showToast('error', e.message);
                }
            });
            $(settings.PaymentReceiveIdAutoGenerate).val(row.paymentId);
            $(settings.PaymentLoanDate).val(row.showPaymentDate);
            $(settings.PaymentLoanAmount).val(row.paymentAmount);
            
           
            if (row.paymentMode == 'Cheque') {
                
                $(settings.IfCheque).fadeIn(500);
                $(settings.IfWairTransferThenHide).fadeIn(500);
            } else if (row.paymentMode === "Wire Transfer") {
                $(settings.IfWairTransferThenHide).fadeOut(500);
                $(settings.IfCheque).fadeIn(500);
            } else if (row.paymentMode === "Cash"){
                $(settings.IfCheque).fadeOut(500);
            }
            $.ajax({
                url: GetPaymentReceiveByIdUrl + "?paymentId=" + encodeURIComponent(row.paymentId),
                type: "GET",
                success: function (res) {
                    console.log(res);
                    $(settings.PaymentReceiveAutoId).val(res.data.autoId);
                    $(settings.PaymentBankAccount).val(res.data.bankAccount);
                    $(settings.PaymentCheckNo).val(res.data.chequeNo);
                    $(settings.PaymentCheckDate).val(res.data.showChequeDate);
                    $(settings.PaymentBank).multiselect('select', res.data.bankId);
                    $(settings.PaymentMode).multiselect('select', res.data.paymentMode);
                    $(settings.CreateDate).text(res.data.showCreateDate);
                    $(settings.UpdateDate).text(res.data.showModifyDate);
                },
                error: function (e) {
                    showToast('error', e.message);
                }
            });
            $(settings.PaymentRemarks).val(row.remarks);

        }); 

        $(document).on('change', settings.PaymentReceiveEmployeeSelect, function () {
            var empId = $(this).val();
            $(settings.LoanDateShow).text('');
            $(settings.LoanType).text('');
            $(settings.LoanAmountShow).text('');
            $(settings.LoanStartEndDate).text('');
            $(settings.LoanNoOfInstallment).text('');
                      
            if (empId) {
                $.ajax({
                    url: PaymentReceiveGetEmpByIdUrl + "?empId=" + encodeURIComponent(empId),
                    type: "GET",
                    success: function (res) {

                        var loanList = res.data.payrollLoanFilterResultDto;
                           $(settings.EmployeeName).text(loanList[0]?.name);
                            $(settings.EmployeeDesignation).text(loanList[0]?.designationName);
                            $(settings.EmployeeDepartment).text(loanList[0]?.departmentName);
                            $(settings.EmployeeJoinDate).text(loanList[0]?.joinDate);          
                                 

                        let paymentData = [];

                        res.data.hrmPayrollPaymentReceiveDtos.forEach(function (item) {
                            paymentData = paymentData.concat(item);
                        });
                       
                        var optLoans = $(settings.EmployeeSelectLoanId);
                        optLoans.empty();
                        optLoans.append(`<option value="">--Loan ID--</option>`);
                        if (loanList && loanList.length > 0 && loanList.some(x => x.code != null)) {

                            $.each(loanList, function (index, loan) {
                                if (loan.code != null && optLoans.find(`option[value="${loan.code}"]`).length === 0) {
                                    optLoans.append(`<option value=${loan.code}>${loan.code}</option>`);
                                }
                            });
                            optLoans.multiselect('rebuild');
                        }

                        if ($.fn.DataTable.isDataTable('#employeeLoanTable')) {
                            $('#employeeLoanTable').DataTable().clear().destroy();
                        }

                        setTimeout(function () {
                            $('#employeeLoanTable').DataTable({
                                data: paymentData,
                                scrollX: true,
                                autoWidth: false,
                                responsive: false,
                                columns: [
                                    {
                                        data: null,
                                        orderable: false,
                                        searchable: false,
                                        render: function (data, type, row) {
                                            return `<input type="checkbox" class="row-checkbox" data-loanid="${row.loanId}" />`;
                                        }
                                    },
                                    {
                                        data: 'paymentId',
                                        className: 'text-center',
                                        render: function (data, type, row) {
                                            return `<a href="#" class="text-primary font-weight-bold view-payment-receive" data-id="${row.autoId}">${data}</a>`;
                                        }
                                    },
                                    { data: "showPaymentDate" },
                                    { data: "paymentAmount" },
                                    { data: "paymentMode" },
                                    { data: "remarks" },
                                    { data: "loanId" },
                                    { data: "empId" },
                                    { data: "empName" },
                                    { data: "designation" }
                                ],
                                columnDefs: [
                                    { width: "60px", targets: 0 },
                                    { width: "100px", targets: 1 },
                                    { width: "120px", targets: 2 },
                                    { width: "120px", targets: 3 },
                                    { width: "120px", targets: 4 },
                                    { width: "150px", targets: 5 },
                                    { width: "100px", targets: 6 },
                                    { width: "120px", targets: 7 },
                                    { width: "180px", targets: 8 },
                                    { width: "150px", targets: 9 },

                                    { className: "text-center", targets: [0, 1, 2, 3, 4, 6, 7] },
                                    { className: "text-left", targets: [5, 8, 9] }
                                ],
                                initComplete: function () {
                                    let table = this.api();
                                    setTimeout(function () {
                                        table.columns.adjust().draw();
                                    }, 100);
                                }
                            });
                        }, 50);
      
                    },
                    error: function (e) {
                        showToast('error', e.message);
                    }
                });
            }            
        });

       

       

       
        paymentType = function (callback) {
            $.ajax({
                url: paymentTypeUrl,
                type: "GET",
                success: function (res) {
                    var paymentTypes = res.data;
                    var paymentTypeOpt = $(settings.PaymentType);
                    if (paymentTypes && paymentTypes.length > 0 && paymentTypes.some(x => x.loanType != null && x.loanTypeId != null)) {
                        paymentTypes.forEach(function (paymentType) {
                            if (paymentType.loanTypeId != null && paymentType.loanType != null && paymentTypeOpt.find(`option[value="${paymentType.loanTypeId}"]`).length === 0) {
                                paymentTypeOpt.append(`<option value="${paymentType.loanTypeId}">${paymentType.loanType}</option>`)
                            }
                        });
                        paymentTypeOpt.multiselect('rebuild');
                    }
                    if (callback) callback(paymentTypes);
                },
                error: function (e) {
                   
                    if (callback) callback([]);
                }
            });
        }

        paymentMode = function () {
            $.ajax({
                url: paymentModeUrl,
                type: "GET",
                success: function (res) {
                    var optPaymentMode = $(settings.PaymentMode);
                    var PaymentModeData = res.data;
                    
                    if (PaymentModeData && PaymentModeData.length > 0 && PaymentModeData.some(x => x.paymentModeId != null && x.paymentModeName != null)) {
                        $.each(PaymentModeData, function (index, paymentMode) {                        
                            if (paymentMode.paymentModeId != null && paymentMode.paymentModeName != null && optPaymentMode.find(`option[value="${paymentMode.paymentModeId}"]`).length === 0) {
                                optPaymentMode.append(`<option value="${paymentMode.paymentModeId}">${paymentMode.paymentModeName}</option>`)
                            }
                        });
                        optPaymentMode.multiselect('rebuild')
                    }
                }, error: function (e) {
                    showToast('error', e.message);
                }
            });
        }
        payHeadDeduction = function () {
            $.ajax({
                url: payHeadDeductionUrl,
                type: "GET",
                success: function (res) {
                    console.log(res);
                    var deductions = res.data;
                    var optDeductionHead = $(settings.DeductionHead);
                    if (deductions && deductions.length > 0 && deductions.some(x => x.payHeadNameId != null && x.name != null)) {
                        $.each(deductions, function (index, deduction) {
                            if (deduction.payHeadNameId != null & deduction.name != null && optDeductionHead.find(`option[value="${deduction.payHeadNameId}"]`).length === 0) {
                                optDeductionHead.append(`<option value="${deduction.payHeadNameId}">${deduction.name}</option>`);
                            }
                        });

                        var disabledIds = ['07','08'];
                        $.each(disabledIds, function (i, id) {
                            optDeductionHead.find(`option[value="${id}"]`).prop("disabled", true);
                        });

                        // After disabling, rebuild the multiselect
                        optDeductionHead.multiselect('rebuild');

                        optDeductionHead.multiselect('rebuild');
                    }
                }, error: function (e) {
                    showToast('error', e.message);
                }
            });
        }
        bankSection = function () {
            $.ajax({
                url: bankUrl,
                type: "GET",
                success: function (res) {
                    var banks = res.data;
                    var optBank = $(settings.Bank);
                    if (banks && banks.length > 0 && banks.some(x => x.bankId != null && x.bankName != null)) {
                        $.each(banks, function (index, bank) {
                            if (bank.bankId != null && bank.bankName != null && optBank.find(`option[value="${bank.bankId}"]`).length === 0) {
                                optBank.append(`<option value="${bank.bankId}">${bank.bankName}</option>`);
                            }
                        });
                        optBank.multiselect('rebuild');
                    }
                }, error(e) {
                   
                }
            });
        }

        createLoanIdAutoGenareted = function() {
            $.ajax({
                url: createLoanId,
                type: "GET",
                success: function (res) {
                    clearLoanForm();
                    $(settings.LoanIdAutoGenerate).val(res.loanId);
                }, error: function (e) {
                    showToast('error', e.message);
                }
            });
        };

        createPaymentReceiveAutoGenareted = function () {
            $.ajax({
                url: autoGeneratedpaymentReceiveIdUrl,
                type: "GET",
                success: function (res) {
                    clearLoanForm();
                    $(settings.PaymentReceiveIdAutoGenerate).val(res.loanId);
                },
                error: function (e) {
                    showToast('error', e.message);
                }
            });
        }
        $(document).on('change', settings.PaymentMode, function () {
            var selectedPaymentType = $(this).val();
            if (selectedPaymentType === '002') {
                $(settings.IfCheque).fadeIn(500);
                $(settings.IfWairTransferThenHide).fadeIn(500);
            } else if (selectedPaymentType === '003') {
                $(settings.IfWairTransferThenHide).fadeOut(500);
                $(settings.IfCheque).fadeIn(500);
            } else {
                $(settings.IfCheque).fadeOut(500);
            }
        });
        $(document).on('change', settings.EndDate, function () {
            
            var startDateStr = $(settings.InstStartDate).val(); 
            var endDateStr = $(settings.EndDate).val();         
          
            if (!startDateStr || !endDateStr) {
                return;
            }
        
            var startParts = startDateStr.split('/');
            var endParts = endDateStr.split('/');

            var startYear = parseInt(startParts[2], 10);
            var startMonth = parseInt(startParts[1], 10);
            var startDate = new Date(startYear, startMonth - 1, 1); 

            var endYear = parseInt(endParts[2], 10);
            var endMonth = parseInt(endParts[1], 10);
            var endDay = parseInt(endParts[0], 10);
            var endDate = new Date(endYear, endMonth - 1, endDay);

            var yearDiff = endDate.getFullYear() - startDate.getFullYear();
            var monthDiff = endDate.getMonth() - startDate.getMonth();

            var totalMonths = yearDiff * 12 + monthDiff + 1;
            if (totalMonths < 0) {
                return;
            }

            if (totalMonths === 0) {
                $(settings.MonthlyDeduction).val($(settings.LoanAmount).val());
                $(settings.NoOfInstallment).val(totalMonths);
            } else {
                $(settings.NoOfInstallment).val(totalMonths);
                var LoanAmount = $(settings.LoanAmount).val();
                var MonthlyDeductionAmount = LoanAmount / totalMonths;
                $(settings.MonthlyDeduction).val(Math.ceil(MonthlyDeductionAmount));
            }
           
        });

        $(document).on('input', settings.InstStartDate, function () {
            ;
            var startDateStr = $(settings.InstStartDate).val(); 
            var endDateStr = $(settings.EndDate).val();         

            if (!startDateStr || !endDateStr) {
                return;
            }

            var startParts = startDateStr.split('/');
            var endParts = endDateStr.split('/');

            var startYear = parseInt(startParts[2], 10);
            var startMonth = parseInt(startParts[1], 10);
            var startDate = new Date(startYear, startMonth - 1, 1);

            var endYear = parseInt(endParts[2], 10);
            var endMonth = parseInt(endParts[1], 10);
            var endDay = parseInt(endParts[0], 10);
            var endDate = new Date(endYear, endMonth - 1, endDay);

            var yearDiff = endDate.getFullYear() - startDate.getFullYear();
            var monthDiff = endDate.getMonth() - startDate.getMonth();

            var totalMonths = yearDiff * 12 + (monthDiff + 1);
            console.log(totalMonths);

            if (totalMonths < 0) {
                return;
            }

            if (totalMonths === 0) {
                $(settings.MonthlyDeduction).val($(settings.LoanAmount).val());
                $(settings.NoOfInstallment).val(totalMonths);
            } else {
                $(settings.NoOfInstallment).val(totalMonths);
                var LoanAmount = $(settings.LoanAmount).val();
                var MonthlyDeductionAmount = LoanAmount / totalMonths;
                $(settings.MonthlyDeduction).val(Math.ceil(MonthlyDeductionAmount));
            }   
        })


        $(document).on('input', settings.LoanAmount, function () {
            ;
            var totalMonth = $(settings.NoOfInstallment).val();          
            if (totalMonth == 0) {
                $(settings.MonthlyDeduction).val($(settings.LoanAmount).val());
                $(settings.NoOfInstallment).val(totalMonth);
            } else {
                var LoanAmount = $(settings.LoanAmount).val();
                var MonthlyDeductionAmount = LoanAmount / totalMonth;
                $(settings.MonthlyDeduction).val(Math.ceil(MonthlyDeductionAmount));
            }
        })

        var today = new Date();
        var loanDatePicker = flatpickr(".loanDate", {
            dateFormat: "d/m/Y",
            defaultDate: today,
            allowInput: true,
            onChange: function (selectedDates, dateStr, instance) {
            },
            onClose: function (selectedDates, dateStr, instance) {
                if (!dateStr) {
                    instance.setDate(today);
                }
            }
        });
        var loanDatePicker = flatpickr(settings.PaymentLoanDate, {
            dateFormat: "d/m/Y",
            defaultDate: today,
            allowInput: true,
            onChange: function (selectedDates, dateStr, instance) {
            },
            onClose: function (selectedDates, dateStr, instance) {
                if (!dateStr) {
                    instance.setDate(today);
                }
            }
        });

        function customPaymentDate(id, date) {
            var today = new Date();
            if ($(id)[0]&& $(id)[0]._flatpickr) {
                $(id)[0]&& $(id)[0]._flatpickr.destroy();
            }

            flatpickr(id.get(0), {
                dateFormat: "d/m/Y",
                defaultDate: date ? new Date(date) : today,
                allowInput: true,
                //minDate: date ? new Date(date) : today,
                onClose: function (selectedDates, dateStr, instance) {
                    if (!dateStr) {
                        instance.setDate(today);
                    }
                }
            });
        }

        var endDatePicker = flatpickr("#endDate", {
            dateFormat: "d/m/Y",
            defaultDate: $(settings.InstStartDate).val(),   
            allowInput: true,
            minDate: $(settings.InstStartDate).val(),
            onClose: function (selectedDates, dateStr, instance) {
                if (!dateStr) {
                    instance.setDate(today);
                }
            }
        });

        // Start Date Picker
        var instStartDatePicker = flatpickr(".instStartDate", {
            dateFormat: "d/m/Y",
            defaultDate: today,
            allowInput:true,
            onChange: function (selectedDates, dateStr, instance) {

                if (selectedDates.length > 0) {                  
                    endDatePicker.set('minDate', selectedDates[0]);
                    endDatePicker.setDate(selectedDates[0]); 
                }
            },
            onClose: function (selectedDates, dateStr, instance) {              
                if (!dateStr) {
                    instance.setDate(today);
                }
            }
        });
        var chequeDatePicker = flatpickr($(settings.ChequeDate), {
            dateFormat: "d/m/Y",
            defaultDate: new Date()
        })
        $(document).on('input', `${settings.LoanAmount}, ${settings.PaymentLoanAmount}`, function () {           
            var val = $(this).val().trim();
            var amount = parseFloat(val);
            if (!paymentTab) {
                if (val === "") {
                    $(settings.LoanAmount).css('border', '');
                    $(settings.AmountWorningMessage).stop(true, true).fadeOut(500);
                } else if (isNaN(amount) || amount < 0) {
                    $(settings.LoanAmount).css('border', '1px solid red');
                    $(settings.AmountWorningMessage).stop(true, true).fadeIn(500);
                } else {
                    $(settings.LoanAmount).css('border', '');
                    $(settings.AmountWorningMessage).stop(true, true).fadeOut(500);
                }
            }
            else {
                if (val === "") {
                    $(settings.PaymentLoanAmount).css('border', '');
                    $(settings.AmountWorningMessage).stop(true, true).fadeOut(500);
                } else if (isNaN(amount) || amount < 0) {
                    $(settings.PaymentLoanAmount).css('border', '1px solid red');
                    $(settings.AmountWorningMessage).stop(true, true).fadeIn(500);
                } else {
                    $(settings.PaymentLoanAmount).css('border', '');
                    $(settings.AmountWorningMessage).stop(true, true).fadeOut(500);
                }
            }

           
        });
       

        //create 
        $(document).on('click', settings.LoanEntryBtn, function () {
            var filterData = submitLoanData()
          
            if (!paymentTab) {
                if (!filterData.CompanyCode || filterData.CompanyCode === "") {
                    showToast('warning', 'Please select an company first!');

                    const $select = $(settings.companyIds);

                    const $button = $select.siblings('.btn-group').find('button.multiselect');

                    $button.focus();

                    setTimeout(() => {
                        $button.click();
                    }, 100);
                    return;
                }


                if (!filterData.EmployeeId || filterData.EmployeeId === "") {
                    showToast('warning', 'Please select an employee first!');

                    const $select = $(settings.EmployeeIds);
                    const $button = $select.siblings('.btn-group').find('button.multiselect');
                    $button.focus();

                    setTimeout(() => {
                        $button.click();
                    }, 100);

                    return;
                }

                if (filterData.LoanAmount <= 0 || filterData.LoanAmount == '') {
                    $(settings.LoanAmount).focus().css('border', '1px solid red');
                    return;
                }


                if (filterData.PaymentModeId == '001') {
                    filterData.BankAccount = '';
                    filterData.BankId = '';
                    filterData.ChequeNo = '';
                    filterData.ChequeDate = null;
                } else if (filterData.PaymentModeId == '002') {
                    filterData.BankAccount = $(settings.BankAccount).val();
                    filterData.BankId = $(settings.Bank).val();
                    filterData.ChequeNo = $(settings.ChequeNo).val();
                    filterData.ChequeDate = formatDate($(settings.ChequeDate).val()) || null;
                } else {
                    filterData.BankAccount = $(settings.BankAccount).val();
                    filterData.BankId = $(settings.Bank).val();
                    filterData.ChequeNo = '';
                    filterData.ChequeDate = null;
                }

                $.ajax({
                    url: createEditLoanUrl,
                    type: "POST",
                    contentType: 'application/json',
                    data: JSON.stringify(filterData),
                    success: function (res) {
                        if (res.isSuccess) {
                            showToast('success', res.message);
                            createLoanIdAutoGenareted();
                            displayLoanDataTable();
                            clearLoanForm();
                        } else {
                            showToast('warning', res.message);
                        }
                    },
                    error: function (e) {
                        showToast('error', e.message);
                    }
                });
            } else {
                
                filterData.LoanId = $(settings.EmployeeSelectLoanId).val();
                filterData.PaymentModeId = $(settings.PaymentReceivePaymentMode).val(); 
                
                if (filterData.PaymentModeId == '001') {
                    filterData.BankAccount = '';
                    filterData.BankId = '';
                    filterData.ChequeNo = '';
                    filterData.ChequeDate = null;
                } else if (filterData.PaymentModeId == '002') {
                    filterData.BankAccount = $(settings.PaymentBankAccount).val();
                    filterData.BankId = $(settings.PaymentBank).val();
                    filterData.ChequeNo = $(settings.PaymentCheckNo).val();
                    filterData.ChequeDate = $(settings.PaymentCheckDate).val();
                } else {
                    filterData.BankAccount = $(settings.PaymentBankAccount).val();
                    filterData.BankId = $(settings.PaymentBank).val();
                    filterData.ChequeNo = '';
                    filterData.ChequeDate = null;
                }
               
                filterData.Remarks = $(settings.PaymentRemarks).val();
                filterData.LoanDate = formatDate($(settings.PaymentLoanDate).val()) || null;
                if (!filterData.EmployeeId || filterData.EmployeeId === "") {
                    showToast('warning', 'Please select an employee first!');

                    const $select = $(settings.PaymentReceiveEmployeeSelect);
                    const $button = $select.siblings('.btn-group').find('button.multiselect');
                    $button.focus();

                    setTimeout(() => {
                        $button.click();
                    }, 100);

                    return;
                }

                if (!filterData.LoanId || filterData.LoanId === "") {
                    showToast('warning', 'Please select an Loan first!');
                    const $select = $(settings.EmployeeSelectLoanId);
                    const $button = $select.siblings('.btn-group').find('button.multiselect');
                    $button.focus();

                    setTimeout(() => {
                        $button.click();
                    }, 100);
                    return;
                }
                if (filterData.LoanAmount <= 0 || filterData.LoanAmount == '') {
                    $(settings.PaymentLoanAmount).focus().css('border', '1px solid red');
                    return;
                }
                filterData.AutoId = $(settings.PaymentReceiveAutoId).val() || 0;  
                $.ajax({
                    url: CreateEditPaymentReceiveUrl,
                    type: "POST",
                    contentType: 'application/json',
                    data: JSON.stringify(filterData),
                    success: function (res) {
                        if (res.isSuccess) {
                            showToast('success', res.message);
                            loadPaymentReceiveData();
                            ReceiveLoan();
                            createPaymentReceiveAutoGenareted();
                            $(settings.IfWairTransferThenHide).fadeOut(500);
                            $(settings.IfCheque).fadeOut(500);
                            $(settings.LoanAmount).css('border', '');
                            $(settings.AmountWorningMessage).stop(true, true).fadeOut(500);
                            LoadAllPaymentReceive();
                            clearLoanForm();
                        } else {
                            showToast('warning', res.message);
                        }
                    },
                    error: function (e) {
                        showToast('error', e.message);
                    }
                });
            }
            
        })

        var LoanTable;

        function displayLoanDataTable() {
            if ($.fn.DataTable.isDataTable("#loan-data-grid")) {
                $("#loan-data-grid").DataTable().clear().destroy();
            }

            LoanTable = $('#loan-data-grid').DataTable({
                processing: true,
                serverSide: false,
                scrollX: true,          
                scrollY: "400px",        
                scrollCollapse: true,
                paging: true,
                searching: true,
                responsive: false, 
                ajax: {
                    url: getLoanDataUrl,
                    type: 'GET',
                    dataSrc: 'data'
                },
                columns: [
                    {
                        data: null,
                        orderable: false,
                        className: 'text-center',
                        render: function (data, type, row) {
                            return `<input class="payrollLoan" type="checkbox" data-id="${row.autoId}" />`;
                        }
                    },
                    {
                        data: 'loanId',
                        className: 'text-center',
                        render: function (data, type, row) {
                            return `<a href="#" class="text-primary font-weight-bold view-loan" data-id="${row.autoId}">${data}</a>`;
                        }
                    },
                    { data: 'showLoanDate', className: 'text-center' },
                    { data: 'loanTypeName', className: 'text-left' },
                    { data: 'employeeId', className: 'text-center' },
                    { data: 'empName', className: 'text-left' },
                    { data: 'designationName', className: 'text-left' },
                    { data: 'loanAmount', className: 'text-center' },
                    { data: 'startShowDate', className: 'text-center' },
                    { data: 'endShowDate', className: 'text-center' },
                    { data: 'noOfInstallment', className: 'text-center' },
                    { data: 'monthlyDeduction', className: 'text-center' },
                    { data: 'paymentModeName', className: 'text-left' }
                ],
                language: {
                    search: "🔍 Search:",
                    lengthMenu: "Show _MENU_ entries",
                    info: "Showing _START_ to _END_ of _TOTAL_ entries",
                    paginate: {
                        first: "First",
                        previous: "Prev",
                        next: "Next",
                        last: "Last"
                    },
                    emptyTable: "No data available"
                }
            });
        }

        function formatEditDate(dateStr) {
            if (!dateStr) return ''; 
            const date = new Date(dateStr);
            const day = String(date.getDate()).padStart(2, '0'); 
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear();
            return `${day}/${month}/${year}`; 
        }

        $("#loan-data-grid tbody").on('click', 'td:nth-child(2)', function () {
            //debugger
            var loanRow = LoanTable.row(this).data();
            selectedLoanId = [];
            selectedLoanId.push(loanRow.autoId);
            var loanId = loanRow.loanId;
            if (loanRow.paymentModeName === "Cheque") {
                $(settings.IfCheque).fadeIn(500);
                $(settings.IfWairTransferThenHide).fadeIn(500);
            } else if (loanRow.paymentModeName === "Electronics Transfer") {
                $(settings.IfWairTransferThenHide).fadeOut(500);
                   $(settings.IfCheque).fadeIn(500);
            } else {
                $(settings.IfCheque).fadeOut(500);
            }           

            console.log(loanRow);

            
            $(settings.CreateDate).text(loanRow.showCreateDate);
            $(settings.UpdateDate).text(loanRow.showModifyDate);
            $(settings.ReasonOfLoanTaken).val(loanRow.reasonOfLoanTaken);

            $(settings.PaymentType).multiselect('select', loanRow.loanTypeId);
            $(settings.EmployeeIds).multiselect('select', loanRow.employeeId);
            $(settings.DeductionHead).multiselect('select', loanRow.payHeadNameId);
            $(settings.Bank).multiselect('select', loanRow.bankId);
            
            $(settings.PaymentMode).multiselect('select', loanRow.paymentModeId);
            
            $(settings.LoanAutoId).val(loanRow.autoId || 0);
            $(settings.LoanIdAutoGenerate).val(loanRow.loanId || '');
            $(settings.EmployeeIds).val(loanRow.employeeId || '');
            $(settings.PaymentType).val(loanRow.loanTypeId || '');
            $(settings.LoanAmount).val(loanRow.loanAmount || 0);
            $(settings.NoOfInstallment).val(loanRow.noOfInstallment || '');
            $(settings.MonthlyDeduction).val(loanRow.monthlyDeduction || 0);
            $(settings.PaymentMode).val(loanRow.paymentModeId || '');
            $(settings.ChequeNo).val(loanRow.chequeNo || '');
            $(settings.BankAccount).val(loanRow.bankAccount || '');
            $(settings.Remarks).val(loanRow.remarks || '');
            $(settings.companyIds).val(loanRow.companyCode || '');
            $(settings.LoanDate).val(formatEditDate(loanRow.loanDate) || null);
            $(settings.InstStartDate).val(formatEditDate(loanRow.startDate) || null);
            $(settings.EndDate).val(formatEditDate(loanRow.endDate) || null);
            $(settings.ChequeDate).val(formatEditDate(loanRow.chequeDate) || null);
            $(settings.EmployeeName).text(loanRow.empName || null);
            $(settings.EmployeeDesignation).text(loanRow.designationName || null);
            $(settings.EmployeeDepartment).text(loanRow.departmentName || null);
            $(settings.EmployeeJoinDate).text(loanRow.showJoiningDate || null);
            $(settings.remarks).text(loanRow.remarks || "");
        });

        var selectPaymentAutoId = [];

        checkOptionPayment = function () {
            $(settings.CheckPaymentAll).on('change', function () {
                var isChecked = $(this).is(":checked");
                
                $('#employeeLoanTable tbody input[type="checkbox"]').each(function () {
                    $(this).prop('checked', isChecked);

                    var autoId = $(this).data('id');
                    if (isChecked) {
                        if (!selectPaymentAutoId.includes(autoId)) {
                            selectPaymentAutoId.push(autoId);
                        }
                    } else {
                        selectPaymentAutoId = selectPaymentAutoId.filter(id => id !== autoId);
                    }
                });
            });

            $(document).on('change', '#employeeLoanTable tbody input[type="checkbox"]', function () {
                var totalCheck = $('#employeeLoanTable tbody input[type="checkbox"]').length;
                var singleCheck = $('#employeeLoanTable tbody input[type="checkbox"]:checked').length;

                var autoId = $(this).data('id'); 

                if ($(this).is(':checked')) {
                    if (!selectPaymentAutoId.includes(autoId)) {
                        selectPaymentAutoId.push(autoId);
                    }
                } else {
                    selectPaymentAutoId = selectPaymentAutoId.filter(id => id !== autoId);
                }

                $(settings.CheckPaymentAll).prop('checked', singleCheck === totalCheck);
            });
        };




        var selectedLoanId = [];

        checkOption = function () {
            $(settings.CheckAll).on('change', function () {
                var isChecked = $(this).is(":checked");

                $('#payrollLoanChcekboxBody input[type="checkbox"]').each(function () {
                    $(this).prop('checked', isChecked);

                    var row = $(this).closest('tr');
                    var loanId = row.find('td:nth-child(2)').text().trim();
                    var autoId = $(this).data('id');
                 

                    if (isChecked) {
                       
                        if (!selectedLoanId.includes(autoId)) {
                            selectedLoanId.push(autoId);
                        }
                    } else {
                        selectedLoanId = selectedLoanId.filter(id => id !== autoId);
                    }
                });

            });

            $(document).on('change', '#payrollLoanChcekboxBody input[type="checkbox"]', function () {
                var totalCheck = $('#payrollLoanChcekboxBody input[type="checkbox"]').length;
                var singleCheck = $('#payrollLoanChcekboxBody input[type="checkbox"]:checked').length;

                var row = $(this).closest('tr');
              
                var loanId = row.find('td:nth-child(2)').text().trim();
                var autoId = $(this).data('id');
                if ($(this).is(':checked')) {
                   if (!selectedLoanId.includes(autoId)) {
                        selectedLoanId.push(autoId);
                    }
                } else {
                    selectedLoanId = selectedLoanId.filter(id => id !== autoId);
                }

                $(settings.CheckAll).prop('checked', singleCheck === totalCheck);

            });
        };


        $(document).on('click', settings.deleteLoanBtn, function () {
            
           
            if (paymentTab) {
                const isPaymentDeleteConfirmed = confirm("Are you sure want to delete these items?");
                if (isPaymentDeleteConfirmed) {
                    deletePaymentReceive();
                }                   
                } else {
                const isLoanDeleteConfirmed = confirm("Are you sure you want to delete the selected loan entries along with all related payment receive records?");
                if (isLoanDeleteConfirmed) {
                deleteLoan();                
                }
                }
           
        });

        deletePaymentReceive = function () {
            $.ajax({
                url: DeletePaymentReceiveUrl,
                type: 'POST',
                data: JSON.stringify(selectPaymentAutoId),
                contentType: 'application/json; charset=urf-8',
                success: function (res) {
                    if (res.isSuccess) {
                        createPaymentReceiveAutoGenareted();
                        showToast('success', res.message);
                        selectPaymentAutoId=[];
                        LoadAllPaymentReceive();
                        $($(settings.CheckPaymentAll)).prop('checked', false);
                    } else {
                        showToast('error',res.message)
                    }                 
                },
                error: function (e) {
                    showToast('error', e.message);
                }
            });
        }
      
        function deleteLoan() {
            $.ajax({
                url: deleteLoanUrl,
                type: 'POST',
                data: JSON.stringify( selectedLoanId ),
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    if (response.isSuccess) {
                        createLoanIdAutoGenareted();
                        selectedLoanId=[];                       
                        displayLoanDataTable();
                        clearLoanForm();
                        showToast('success', response.message);
                        $($(settings.CheckAll)).prop('checked', false);
                    } else {
                        showToast('error', response.message)
                    }                   
                },
                error: function (err) {
                    showToast('error', err.message);
                }
            });
        }

        ReceiveLoan = function () {
            $.ajax({
                url: getLoanDataUrl,
                type: "GET",
                success: function (res) {
                    var Loans = res.data;
                  
                    var optLoans = $(settings.EmployeeSelectLoanId);
                    if (Loans && Loans.length > 0 && Loans.some(x => x.loanId != null)) {
                       
                        $.each(Loans, function (index, loan) {
                           
                            if (loan.loanId != null && optLoans.find(`option[value="${loan.loanId}"]`).length === 0) {
                                optLoans.append(`<option value=${loan.loanId}>${loan.loanId}</option>`);
                            }
                        });
                        optLoans.multiselect('rebuild');
                    }
                },
                error: function (e) {
                    showToast('error', e.message);
                }
            });
        }
        $(document).on('change', settings.EmployeeSelectLoanId, function () {
            var loanId = this.value;
            $.ajax({
                url: getLoanIdUrl + "?loanId=" + encodeURIComponent(loanId),
                type: "GET",
                success: function (res) {
                    console.log(res);
                    var loanData = res.data;
                    if (loanData.isComplete) {
                        showToast('success', loanData.message);
                        $(settings.LoanEntryBtn).prop('disabled', true);
                        $(settings.PaymentLoanAmount).prop('disabled', true);
                    } else {
                        $(settings.LoanEntryBtn).prop('disabled', false);
                        $(settings.PaymentLoanAmount).prop('disabled', false);                        
                    }
                  
                    
                    $(settings.LoanDateShow).text(loanData.showLoanDate);
                    $(settings.LoanType).text(loanData.loanTypeName);
                    $(settings.LoanAmountShow).text(loanData.loanAmount);
                    $(settings.LoanStartEndDate).text(loanData.startShowDate + " - " + loanData.endShowDate);
                    $(settings.LoanNoOfInstallment).text(loanData.noOfInstallment);

                    //paymentLoanDate paymentLoanAmount
                    $(settings.PaymentLoanAmount).val(res.data.paymentLoanAmount);
                    customPaymentDate($(settings.PaymentLoanDate), res.data.paymentLoanDate);
                }, error: function (e) {
                    showToast('error', e.message);
                }
            });
        })
        function StHeader() {
            const header = document.getElementById("stickyHeader");
            window.addEventListener("scroll", function () {
                if (header) {
                    if (window.scrollY > 50) {
                        header.classList.add("sticky-scrolled");
                    } else {
                        header.classList.remove("sticky-scrolled");
                    }
                }
            });
        }

        let time;
        $(document).on('input', settings.PaymentLoanAmount, function () { //todo
            clearTimeout(time);
            var amountValue = $(this).val();
            var loanId = $(settings.EmployeeSelectLoanId).val();
            var loanAmount = $(settings.LoanAmountShow).text();
            console.log(amountValue, loanId, loanAmount);
           time= setTimeout(()=>{
                $.ajax({
                    url: ValidPaymentAmountUrl,
                    type: "POST",
                    data: JSON.stringify({ amountValue, loanId, loanAmount }),
                    contentType: 'application/json',
                    success: function (res) {
                        console.log(res);
                        if (res.isSuccess) {
                            $(settings.PaymentLoanAmount).css('border', '');
                            $(settings.LoanEntryBtn).prop('disabled', false);
                        }
                        if(!res.isSuccess){
                            $(settings.PaymentLoanAmount).css('border', '1px solid red');
                            $(settings.LoanEntryBtn).prop('disabled',true);
                            showToast("info", res.message);
                        }
                    }, error: function (e) {
                        console.log(e)
                    }
                });
            },800)
        })
       
        //loadPaymentReceiveData
        var init = function () {
            StHeader();
            loadFilterData();
            initializeMultiselects();
            paymentType();
            paymentMode();
            payHeadDeduction();
            createLoanIdAutoGenareted();
            bankSection();
            displayLoanDataTable();
            checkOption();
            checkOptionPayment();

            loanDatePicker;
            instStartDatePicker;
            endDatePicker;
            chequeDatePicker;
        };
        init();
    };
})(jQuery);
