// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using GCTL.Data.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace GCTL.Data.Models
{
    public partial class GCTL_ERP_DB_DatapathContext
    {
        private IGCTL_ERP_DB_DatapathContextProcedures _procedures;

        public virtual IGCTL_ERP_DB_DatapathContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new GCTL_ERP_DB_DatapathContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IGCTL_ERP_DB_DatapathContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CheckCommissionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CheckDiscountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CheckPaymentByMrNoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CollectionReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CollectionReportForUserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CommissionDetailsByDoctorResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CommissionDetailsByReferenceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<DoctorCommissionReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<DoctorCommissionSummaryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<DueCollectionReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<DueCollectionReportForUserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<DueReceiptsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<EducationalInfoReportSPResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<EmployeeGeneralInfoReportSPResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<EmployeeLoanInformationReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<EmployeeReferenceInformationReportSPResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAdvancePayPagedWithFilterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetCompanyNamesBySearchResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetDiscountDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeesByCompanyAdvanceLoanAdjustmentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeesByCompanyLoanAdjustmentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetLeaveReport100Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetOfficialInfoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetTBDetailsDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetTestRoomNoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<PaidReceiptsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Prc_Frm_TempAccountDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Prc_GetAccessCodeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_GetTestAmountBySubCatagoryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_LederReportDateTimeFResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_LederReportFResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Prc_Load_AcountHeadResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Prc_Load_FourthAcountHeadResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Prc_Load_ThirdAcountHeadResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Prc_LoadGrid_Acc_SubSubsidiaryLedgerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Prc_LoadGridCompanyOpeningBalanceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Prc_Rpt_AccComLedgerFourthLayerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Prc_Rpt_AccComLedgerThirdLayerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_TRGridFilerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_VSGridFilerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<proc_ExpenseReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Proc_getCustomerInvoiceDueListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Proc_getOrderListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Proc_getOrderListHeaderResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<proc_GetPatientListForLabTestResultResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Proc_getTransportinfowithDriverResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Proc_getVendorListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<proc_LabTestListNotInVoucherResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<proc_Select_CL_SCL_GGL_GLAndSLAllInfoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ProcGetEployeeFilterDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<PROCPrintingAndStationeryReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ReferenceCommissionReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ReferenceCommissionSummaryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_PatientInfoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_BankReceiptVoucherResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_BeforePLTotalCompanyTaxExpenseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_BeforePLTotalDirectExpenseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_BeforePLTotalDirectorRemunOthersExpenseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_BeforePLTotalFinanceCostResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_BeforePLTotalGeneralAdminExpenseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_BeforePLTotalManpowercostExpenseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_BeforePLTotalOfficeOverheadExpenseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_BeforePLTotalOtherIncomeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_BeforePLTotalSalesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_BSNonCurrentAssetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_BSTotalCapitalResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_BSTotalCurrentAssetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_BSTotalCurrentLiablitiesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_BSTotalLongLiablitiesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_Proc_DueListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_Proc_InvoiceReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_Proc_OutPatientPrescriptionReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_PLTotalCompanyTaxExpenseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_PLTotalDirectExpenseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_PLTotalDirectorRemunOthersExpenseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_PLTotalFinanceCostResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_PLTotalGeneralAdminExpenseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_PLTotalInDirectExpenseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_PLTotalManpowercostExpenseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_PLTotalOfficeOverheadExpenseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_PLTotalOtherIncomeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_PLTotalSalesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_Proc_SalesCollectionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_Proc_SalesCollectionForUserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_proc_TrialBalanceReportF2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_ProReceiveAndPaymentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Rpt_ProReceiveAndPaymentWithOutOpeningResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SalesReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SalesReportForUserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SP_GetEmployeesByEmployeeIDsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SP_HRM_AdvancePayFilterDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SP_HRM_AdvancePayReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<VoucherEntryForCollectionReceivedbankResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<VoucherEntryForCollectionReceivedCashResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<VoucherEntryForTransportApprovedResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<WorkingExperienceReportSPResult>().HasNoKey().ToView(null);
        }
    }

    public partial class GCTL_ERP_DB_DatapathContextProcedures : IGCTL_ERP_DB_DatapathContextProcedures
    {
        private readonly GCTL_ERP_DB_DatapathContext _context;

        public GCTL_ERP_DB_DatapathContextProcedures(GCTL_ERP_DB_DatapathContext context)
        {
            _context = context;
        }

        public virtual async Task<List<CheckCommissionResult>> CheckCommissionAsync(int? CommissionSetupDetailsId, string CategoryId, string TestChargeId, string DoctorId, string ReferenceId, string EffectiveDate, string EffectiveTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CommissionSetupDetailsId",
                    Value = CommissionSetupDetailsId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryId",
                    Size = 100,
                    Value = CategoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TestChargeId",
                    Size = 100,
                    Value = TestChargeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DoctorId",
                    Size = 100,
                    Value = DoctorId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 100,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EffectiveDate",
                    Size = 100,
                    Value = EffectiveDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EffectiveTo",
                    Size = 100,
                    Value = EffectiveTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CheckCommissionResult>("EXEC @returnValue = [dbo].[CheckCommission] @CommissionSetupDetailsId = @CommissionSetupDetailsId, @CategoryId = @CategoryId, @TestChargeId = @TestChargeId, @DoctorId = @DoctorId, @ReferenceId = @ReferenceId, @EffectiveDate = @EffectiveDate, @EffectiveTo = @EffectiveTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CheckDiscountResult>> CheckDiscountAsync(int? DiscountSetupDetailsId, string CategoryId, string TestChargeId, string EffectiveDate, string EffectiveTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DiscountSetupDetailsId",
                    Value = DiscountSetupDetailsId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryId",
                    Size = 100,
                    Value = CategoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TestChargeId",
                    Size = 100,
                    Value = TestChargeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EffectiveDate",
                    Size = 100,
                    Value = EffectiveDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EffectiveTo",
                    Size = 100,
                    Value = EffectiveTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CheckDiscountResult>("EXEC @returnValue = [dbo].[CheckDiscount] @DiscountSetupDetailsId = @DiscountSetupDetailsId, @CategoryId = @CategoryId, @TestChargeId = @TestChargeId, @EffectiveDate = @EffectiveDate, @EffectiveTo = @EffectiveTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CheckPaymentByMrNoResult>> CheckPaymentByMrNoAsync(string MrNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MrNo",
                    Size = 100,
                    Value = MrNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CheckPaymentByMrNoResult>("EXEC @returnValue = [dbo].[CheckPaymentByMrNo] @MrNo = @MrNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CollectionReportResult>> CollectionReportAsync(string BillTypeId, string PatientTypeId, DateTime? FromDate, DateTime? ToDate, string DoctorId, string ReferenceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BillTypeId",
                    Size = 100,
                    Value = BillTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientTypeId",
                    Size = 100,
                    Value = PatientTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DoctorId",
                    Size = 100,
                    Value = DoctorId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 100,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CollectionReportResult>("EXEC @returnValue = [dbo].[CollectionReport] @BillTypeId = @BillTypeId, @PatientTypeId = @PatientTypeId, @FromDate = @FromDate, @ToDate = @ToDate, @DoctorId = @DoctorId, @ReferenceId = @ReferenceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CollectionReportForUserResult>> CollectionReportForUserAsync(string BillTypeId, string PatientTypeId, DateTime? FromDate, DateTime? ToDate, string DoctorId, string ReferenceId, string EmployeeId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BillTypeId",
                    Size = 100,
                    Value = BillTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientTypeId",
                    Size = 100,
                    Value = PatientTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DoctorId",
                    Size = 100,
                    Value = DoctorId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 100,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeId",
                    Size = 100,
                    Value = EmployeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CollectionReportForUserResult>("EXEC @returnValue = [dbo].[CollectionReportForUser] @BillTypeId = @BillTypeId, @PatientTypeId = @PatientTypeId, @FromDate = @FromDate, @ToDate = @ToDate, @DoctorId = @DoctorId, @ReferenceId = @ReferenceId, @EmployeeId = @EmployeeId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CommissionDetailsByDoctorResult>> CommissionDetailsByDoctorAsync(string ReceiverId, string TestCategoryId, string TestChargeId, DateTime? EffectiveDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ReceiverId",
                    Size = 100,
                    Value = ReceiverId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TestCategoryId",
                    Size = 100,
                    Value = TestCategoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TestChargeId",
                    Size = 100,
                    Value = TestChargeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EffectiveDate",
                    Value = EffectiveDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CommissionDetailsByDoctorResult>("EXEC @returnValue = [dbo].[CommissionDetailsByDoctor] @ReceiverId = @ReceiverId, @TestCategoryId = @TestCategoryId, @TestChargeId = @TestChargeId, @EffectiveDate = @EffectiveDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CommissionDetailsByReferenceResult>> CommissionDetailsByReferenceAsync(string ReceiverId, string TestCategoryId, string TestChargeId, DateTime? EffectiveDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ReceiverId",
                    Size = 100,
                    Value = ReceiverId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TestCategoryId",
                    Size = 100,
                    Value = TestCategoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TestChargeId",
                    Size = 100,
                    Value = TestChargeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EffectiveDate",
                    Value = EffectiveDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CommissionDetailsByReferenceResult>("EXEC @returnValue = [dbo].[CommissionDetailsByReference] @ReceiverId = @ReceiverId, @TestCategoryId = @TestCategoryId, @TestChargeId = @TestChargeId, @EffectiveDate = @EffectiveDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DoctorCommissionReportResult>> DoctorCommissionReportAsync(string CommissionReceiver, string CommissionReceiverId, DateTime? FromDate, DateTime? ToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CommissionReceiver",
                    Size = 100,
                    Value = CommissionReceiver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CommissionReceiverId",
                    Size = -1,
                    Value = CommissionReceiverId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DoctorCommissionReportResult>("EXEC @returnValue = [dbo].[DoctorCommissionReport] @CommissionReceiver = @CommissionReceiver, @CommissionReceiverId = @CommissionReceiverId, @FromDate = @FromDate, @ToDate = @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DoctorCommissionSummaryResult>> DoctorCommissionSummaryAsync(string CommissionReceiver, string CommissionReceiverId, DateTime? FromDate, DateTime? ToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CommissionReceiver",
                    Size = 100,
                    Value = CommissionReceiver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CommissionReceiverId",
                    Size = 100,
                    Value = CommissionReceiverId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DoctorCommissionSummaryResult>("EXEC @returnValue = [dbo].[DoctorCommissionSummary] @CommissionReceiver = @CommissionReceiver, @CommissionReceiverId = @CommissionReceiverId, @FromDate = @FromDate, @ToDate = @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DueCollectionReportResult>> DueCollectionReportAsync(string BillTypeId, string PatientTypeId, DateTime? FromDate, DateTime? ToDate, string DoctorId, string ReferenceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BillTypeId",
                    Size = 100,
                    Value = BillTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientTypeId",
                    Size = 100,
                    Value = PatientTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DoctorId",
                    Size = 100,
                    Value = DoctorId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 100,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DueCollectionReportResult>("EXEC @returnValue = [dbo].[DueCollectionReport] @BillTypeId = @BillTypeId, @PatientTypeId = @PatientTypeId, @FromDate = @FromDate, @ToDate = @ToDate, @DoctorId = @DoctorId, @ReferenceId = @ReferenceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DueCollectionReportForUserResult>> DueCollectionReportForUserAsync(string BillTypeId, string PatientTypeId, DateTime? FromDate, DateTime? ToDate, string DoctorId, string ReferenceId, string EmployeeId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BillTypeId",
                    Size = 100,
                    Value = BillTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientTypeId",
                    Size = 100,
                    Value = PatientTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DoctorId",
                    Size = 100,
                    Value = DoctorId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 100,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeId",
                    Size = 100,
                    Value = EmployeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DueCollectionReportForUserResult>("EXEC @returnValue = [dbo].[DueCollectionReportForUser] @BillTypeId = @BillTypeId, @PatientTypeId = @PatientTypeId, @FromDate = @FromDate, @ToDate = @ToDate, @DoctorId = @DoctorId, @ReferenceId = @ReferenceId, @EmployeeId = @EmployeeId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DueReceiptsResult>> DueReceiptsAsync(string BillTypeId, string PatientTypeId, DateTime? FromDate, DateTime? ToDate, string DoctorId, string ReferenceId, string Role, string LUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BillTypeId",
                    Size = 100,
                    Value = BillTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientTypeId",
                    Size = 100,
                    Value = PatientTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DoctorId",
                    Size = 100,
                    Value = DoctorId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 100,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Role",
                    Size = 100,
                    Value = Role ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LUser",
                    Size = 100,
                    Value = LUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DueReceiptsResult>("EXEC @returnValue = [dbo].[DueReceipts] @BillTypeId = @BillTypeId, @PatientTypeId = @PatientTypeId, @FromDate = @FromDate, @ToDate = @ToDate, @DoctorId = @DoctorId, @ReferenceId = @ReferenceId, @Role = @Role, @LUser = @LUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EducationalInfoReportSPResult>> EducationalInfoReportSPAsync(string DepartmentCodes, string DesignationCodes, string EmployeeCodes, string BranchCodes, string CompanyCodes, string NationalIDNO, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DepartmentCodes",
                    Size = 100,
                    Value = DepartmentCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DesignationCodes",
                    Size = 100,
                    Value = DesignationCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeCodes",
                    Size = 100,
                    Value = EmployeeCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchCodes",
                    Size = 100,
                    Value = BranchCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyCodes",
                    Size = 100,
                    Value = CompanyCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NationalIDNO",
                    Size = 100,
                    Value = NationalIDNO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EducationalInfoReportSPResult>("EXEC @returnValue = [dbo].[EducationalInfoReportSP] @DepartmentCodes = @DepartmentCodes, @DesignationCodes = @DesignationCodes, @EmployeeCodes = @EmployeeCodes, @BranchCodes = @BranchCodes, @CompanyCodes = @CompanyCodes, @NationalIDNO = @NationalIDNO", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EmployeeGeneralInfoReportSPResult>> EmployeeGeneralInfoReportSPAsync(string DepartmentCodes, string DesignationCodes, string EmployeeCodes, string BranchCodes, string CompanyCodes, string GenderCode, string BloodGroupCode, string NationalityCode, string ReligionCode, string MaritalStatusCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DepartmentCodes",
                    Size = -1,
                    Value = DepartmentCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DesignationCodes",
                    Size = -1,
                    Value = DesignationCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeCodes",
                    Size = -1,
                    Value = EmployeeCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchCodes",
                    Size = -1,
                    Value = BranchCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyCodes",
                    Size = -1,
                    Value = CompanyCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GenderCode",
                    Size = 100,
                    Value = GenderCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BloodGroupCode",
                    Size = 100,
                    Value = BloodGroupCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NationalityCode",
                    Size = 100,
                    Value = NationalityCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReligionCode",
                    Size = 100,
                    Value = ReligionCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaritalStatusCode",
                    Size = 100,
                    Value = MaritalStatusCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EmployeeGeneralInfoReportSPResult>("EXEC @returnValue = [dbo].[EmployeeGeneralInfoReportSP] @DepartmentCodes = @DepartmentCodes, @DesignationCodes = @DesignationCodes, @EmployeeCodes = @EmployeeCodes, @BranchCodes = @BranchCodes, @CompanyCodes = @CompanyCodes, @GenderCode = @GenderCode, @BloodGroupCode = @BloodGroupCode, @NationalityCode = @NationalityCode, @ReligionCode = @ReligionCode, @MaritalStatusCode = @MaritalStatusCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EmployeeLoanInformationReportResult>> EmployeeLoanInformationReportAsync(string CompanyID, string EmployeeID, string LoanID, string LoanTypeID, DateTime? DateFrom, DateTime? DateTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Size = 400,
                    Value = CompanyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeID",
                    Size = 400,
                    Value = EmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LoanID",
                    Size = 400,
                    Value = LoanID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LoanTypeID",
                    Size = 400,
                    Value = LoanTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EmployeeLoanInformationReportResult>("EXEC @returnValue = [dbo].[EmployeeLoanInformationReport] @CompanyID = @CompanyID, @EmployeeID = @EmployeeID, @LoanID = @LoanID, @LoanTypeID = @LoanTypeID, @DateFrom = @DateFrom, @DateTo = @DateTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EmployeeReferenceInformationReportSPResult>> EmployeeReferenceInformationReportSPAsync(string DepartmentCodes, string DesignationCodes, string EmployeeCodes, string BranchCodes, string CompanyCodes, string NationalIDNO, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DepartmentCodes",
                    Size = 100,
                    Value = DepartmentCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DesignationCodes",
                    Size = 100,
                    Value = DesignationCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeCodes",
                    Size = 100,
                    Value = EmployeeCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchCodes",
                    Size = 100,
                    Value = BranchCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyCodes",
                    Size = 100,
                    Value = CompanyCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NationalIDNO",
                    Size = 100,
                    Value = NationalIDNO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EmployeeReferenceInformationReportSPResult>("EXEC @returnValue = [dbo].[EmployeeReferenceInformationReportSP] @DepartmentCodes = @DepartmentCodes, @DesignationCodes = @DesignationCodes, @EmployeeCodes = @EmployeeCodes, @BranchCodes = @BranchCodes, @CompanyCodes = @CompanyCodes, @NationalIDNO = @NationalIDNO", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAdvancePayPagedWithFilterResult>> GetAdvancePayPagedWithFilterAsync(int? PageNumber, int? PageSize, string SearchValue, string Department, string Month, string Year, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchValue",
                    Size = 510,
                    Value = SearchValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Department",
                    Size = 200,
                    Value = Department ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Month",
                    Size = 40,
                    Value = Month ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Year",
                    Size = 20,
                    Value = Year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAdvancePayPagedWithFilterResult>("EXEC @returnValue = [dbo].[GetAdvancePayPagedWithFilter] @PageNumber = @PageNumber, @PageSize = @PageSize, @SearchValue = @SearchValue, @Department = @Department, @Month = @Month, @Year = @Year", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCompanyNamesBySearchResult>> GetCompanyNamesBySearchAsync(string SearchCompanyName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchCompanyName",
                    Size = 200,
                    Value = SearchCompanyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCompanyNamesBySearchResult>("EXEC @returnValue = [dbo].[GetCompanyNamesBySearch] @SearchCompanyName = @SearchCompanyName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetDiscountDetailsResult>> GetDiscountDetailsAsync(string TestChargeId, DateTime? FromDate, DateTime? ToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TestChargeId",
                    Size = 100,
                    Value = TestChargeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetDiscountDetailsResult>("EXEC @returnValue = [dbo].[GetDiscountDetails] @TestChargeId = @TestChargeId, @FromDate = @FromDate, @ToDate = @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeesByCompanyAdvanceLoanAdjustmentResult>> GetEmployeesByCompanyAdvanceLoanAdjustmentAsync(string EmployeeStatusId, string CompanyCode, string EmployeeName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmployeeStatusId",
                    Size = 20,
                    Value = EmployeeStatusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyCode",
                    Size = 20,
                    Value = CompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeName",
                    Size = 200,
                    Value = EmployeeName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeesByCompanyAdvanceLoanAdjustmentResult>("EXEC @returnValue = [dbo].[GetEmployeesByCompanyAdvanceLoanAdjustment] @EmployeeStatusId = @EmployeeStatusId, @CompanyCode = @CompanyCode, @EmployeeName = @EmployeeName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeesByCompanyLoanAdjustmentResult>> GetEmployeesByCompanyLoanAdjustmentAsync(string EmployeeStatusId, string CompanyCode, string EmployeeName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmployeeStatusId",
                    Size = 20,
                    Value = EmployeeStatusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyCode",
                    Size = 20,
                    Value = CompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeName",
                    Size = 200,
                    Value = EmployeeName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeesByCompanyLoanAdjustmentResult>("EXEC @returnValue = [dbo].[GetEmployeesByCompanyLoanAdjustment] @EmployeeStatusId = @EmployeeStatusId, @CompanyCode = @CompanyCode, @EmployeeName = @EmployeeName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetLeaveReport100Result>> GetLeaveReport100Async(DateTime? DateFrom, DateTime? DateTo, string Company, string Branch, string Department, string Employee, string LeaveFormat, string LeaveStatus, string ReportFormat, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Company",
                    Size = -1,
                    Value = Company ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Branch",
                    Size = -1,
                    Value = Branch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Department",
                    Size = -1,
                    Value = Department ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Employee",
                    Size = -1,
                    Value = Employee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LeaveFormat",
                    Size = -1,
                    Value = LeaveFormat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LeaveStatus",
                    Size = -1,
                    Value = LeaveStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReportFormat",
                    Size = 50,
                    Value = ReportFormat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetLeaveReport100Result>("EXEC @returnValue = [dbo].[GetLeaveReport100] @DateFrom = @DateFrom, @DateTo = @DateTo, @Company = @Company, @Branch = @Branch, @Department = @Department, @Employee = @Employee, @LeaveFormat = @LeaveFormat, @LeaveStatus = @LeaveStatus, @ReportFormat = @ReportFormat", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetOfficialInfoResult>> GetOfficialInfoAsync(string DepartmentCodes, string DesignationCodes, string EmployeeCodes, string BranchCodes, string CompanyCodes, string EmployeeTypeCode, string EmploymentNatureId, string NationalId, string TinNo, string PassportNo, string DrivingLicense, string IsExpatriate, string ImmediateSup, string HOD, string ShiftCode, string EmployeeStatus, decimal? SalaryFrom, decimal? SalaryTo, DateOnly? AppointmentDateFrom, DateOnly? AppointmentDateTo, DateOnly? JoiningDatefrom, DateOnly? JoiningDateTo, DateOnly? TerminationDateFrom, DateOnly? TerminationDateTo, DateOnly? ProbationDateFrom, DateOnly? ProbationDateTo, DateOnly? ConfirmationDateFrom, DateOnly? ConfirmationDateTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DepartmentCodes",
                    Size = -1,
                    Value = DepartmentCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DesignationCodes",
                    Size = -1,
                    Value = DesignationCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeCodes",
                    Size = -1,
                    Value = EmployeeCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchCodes",
                    Size = -1,
                    Value = BranchCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyCodes",
                    Size = -1,
                    Value = CompanyCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeTypeCode",
                    Size = 100,
                    Value = EmployeeTypeCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmploymentNatureId",
                    Size = 100,
                    Value = EmploymentNatureId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NationalId",
                    Size = 100,
                    Value = NationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TinNo",
                    Size = 100,
                    Value = TinNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PassportNo",
                    Size = 100,
                    Value = PassportNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrivingLicense",
                    Size = 100,
                    Value = DrivingLicense ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsExpatriate",
                    Size = 20,
                    Value = IsExpatriate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ImmediateSup",
                    Size = 100,
                    Value = ImmediateSup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HOD",
                    Size = 100,
                    Value = HOD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ShiftCode",
                    Size = 100,
                    Value = ShiftCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeStatus",
                    Size = 100,
                    Value = EmployeeStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SalaryFrom",
                    Precision = 18,
                    Scale = 2,
                    Value = SalaryFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SalaryTo",
                    Precision = 18,
                    Scale = 2,
                    Value = SalaryTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AppointmentDateFrom",
                    Value = AppointmentDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "AppointmentDateTo",
                    Value = AppointmentDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "JoiningDatefrom",
                    Value = JoiningDatefrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "JoiningDateTo",
                    Value = JoiningDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "TerminationDateFrom",
                    Value = TerminationDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "TerminationDateTo",
                    Value = TerminationDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "ProbationDateFrom",
                    Value = ProbationDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "ProbationDateTo",
                    Value = ProbationDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "ConfirmationDateFrom",
                    Value = ConfirmationDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "ConfirmationDateTo",
                    Value = ConfirmationDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetOfficialInfoResult>("EXEC @returnValue = [dbo].[GetOfficialInfo] @DepartmentCodes = @DepartmentCodes, @DesignationCodes = @DesignationCodes, @EmployeeCodes = @EmployeeCodes, @BranchCodes = @BranchCodes, @CompanyCodes = @CompanyCodes, @EmployeeTypeCode = @EmployeeTypeCode, @EmploymentNatureId = @EmploymentNatureId, @NationalId = @NationalId, @TinNo = @TinNo, @PassportNo = @PassportNo, @DrivingLicense = @DrivingLicense, @IsExpatriate = @IsExpatriate, @ImmediateSup = @ImmediateSup, @HOD = @HOD, @ShiftCode = @ShiftCode, @EmployeeStatus = @EmployeeStatus, @SalaryFrom = @SalaryFrom, @SalaryTo = @SalaryTo, @AppointmentDateFrom = @AppointmentDateFrom, @AppointmentDateTo = @AppointmentDateTo, @JoiningDatefrom = @JoiningDatefrom, @JoiningDateTo = @JoiningDateTo, @TerminationDateFrom = @TerminationDateFrom, @TerminationDateTo = @TerminationDateTo, @ProbationDateFrom = @ProbationDateFrom, @ProbationDateTo = @ProbationDateTo, @ConfirmationDateFrom = @ConfirmationDateFrom, @ConfirmationDateTo = @ConfirmationDateTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetTBDetailsDataResult>> GetTBDetailsDataAsync(string TBReceiveNO, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TBReceiveNO",
                    Size = 50,
                    Value = TBReceiveNO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetTBDetailsDataResult>("EXEC @returnValue = [dbo].[GetTBDetailsData] @TBReceiveNO = @TBReceiveNO", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetTestRoomNoResult>> GetTestRoomNoAsync(string TestCategoryId, string TestId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TestCategoryId",
                    Size = 100,
                    Value = TestCategoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TestId",
                    Size = 100,
                    Value = TestId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetTestRoomNoResult>("EXEC @returnValue = [dbo].[GetTestRoomNo] @TestCategoryId = @TestCategoryId, @TestId = @TestId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidReceiptsResult>> PaidReceiptsAsync(string BillTypeId, string PatientTypeId, DateTime? FromDate, DateTime? ToDate, string DoctorId, string ReferenceId, string Role, string LUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BillTypeId",
                    Size = 100,
                    Value = BillTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientTypeId",
                    Size = 100,
                    Value = PatientTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DoctorId",
                    Size = 100,
                    Value = DoctorId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 100,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Role",
                    Size = 100,
                    Value = Role ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LUser",
                    Size = 100,
                    Value = LUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidReceiptsResult>("EXEC @returnValue = [dbo].[PaidReceipts] @BillTypeId = @BillTypeId, @PatientTypeId = @PatientTypeId, @FromDate = @FromDate, @ToDate = @ToDate, @DoctorId = @DoctorId, @ReferenceId = @ReferenceId, @Role = @Role, @LUser = @LUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Prc_ExcuteCustomerOnChartOfAccountAsync(string PatientCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PatientCode",
                    Size = 100,
                    Value = PatientCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Prc_ExcuteCustomerOnChartOfAccount] @PatientCode = @PatientCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Prc_ExcuteInvoiceWaysCollectionAsync(string PaymentReceiveID, string CustomerID, decimal? leftAmount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PaymentReceiveID",
                    Size = 200,
                    Value = PaymentReceiveID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "leftAmount",
                    Precision = 18,
                    Scale = 2,
                    Value = leftAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Prc_ExcuteInvoiceWaysCollection] @PaymentReceiveID = @PaymentReceiveID, @CustomerID = @CustomerID, @leftAmount = @leftAmount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Prc_ExcuteReferencePersonOnChartOfAccountAsync(string ReferencePersonId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ReferencePersonId",
                    Size = 100,
                    Value = ReferencePersonId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Prc_ExcuteReferencePersonOnChartOfAccount] @ReferencePersonId = @ReferencePersonId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Prc_ExcuteVendorOnChartOfAccountAsync(string VendorID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "VendorID",
                    Size = 100,
                    Value = VendorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Prc_ExcuteVendorOnChartOfAccount] @VendorID = @VendorID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Prc_Frm_TempAccountDetailsResult>> Prc_Frm_TempAccountDetailsAsync(string VoucherNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "VoucherNo",
                    Size = 50,
                    Value = VoucherNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Prc_Frm_TempAccountDetailsResult>("EXEC @returnValue = [dbo].[Prc_Frm_TempAccountDetails] @VoucherNo = @VoucherNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Prc_GetAccessCodeResult>> Prc_GetAccessCodeAsync(string AccessCodeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AccessCodeID",
                    Size = 100,
                    Value = AccessCodeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Prc_GetAccessCodeResult>("EXEC @returnValue = [dbo].[Prc_GetAccessCode] @AccessCodeID = @AccessCodeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_GetTestAmountBySubCatagoryResult>> prc_GetTestAmountBySubCatagoryAsync(string TestSubCategoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TestSubCategoryCode",
                    Size = 100,
                    Value = TestSubCategoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_GetTestAmountBySubCatagoryResult>("EXEC @returnValue = [dbo].[prc_GetTestAmountBySubCatagory] @TestSubCategoryCode = @TestSubCategoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_LederReportDateTimeFResult>> prc_LederReportDateTimeFAsync(string SubSusidiaryLedgerCodeNo, DateTime? FromDate, DateTime? ToDate, string MainCompanyCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SubSusidiaryLedgerCodeNo",
                    Size = 100,
                    Value = SubSusidiaryLedgerCodeNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MainCompanyCode",
                    Size = 100,
                    Value = MainCompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_LederReportDateTimeFResult>("EXEC @returnValue = [dbo].[prc_LederReportDateTimeF] @SubSusidiaryLedgerCodeNo = @SubSusidiaryLedgerCodeNo, @FromDate = @FromDate, @ToDate = @ToDate, @MainCompanyCode = @MainCompanyCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_LederReportFResult>> prc_LederReportFAsync(string SubSusidiaryLedgerCodeNo, string MainCompanyCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SubSusidiaryLedgerCodeNo",
                    Size = 100,
                    Value = SubSusidiaryLedgerCodeNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MainCompanyCode",
                    Size = 100,
                    Value = MainCompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_LederReportFResult>("EXEC @returnValue = [dbo].[prc_LederReportF] @SubSusidiaryLedgerCodeNo = @SubSusidiaryLedgerCodeNo, @MainCompanyCode = @MainCompanyCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Prc_Load_AcountHeadResult>> Prc_Load_AcountHeadAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Prc_Load_AcountHeadResult>("EXEC @returnValue = [dbo].[Prc_Load_AcountHead]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Prc_Load_FourthAcountHeadResult>> Prc_Load_FourthAcountHeadAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Prc_Load_FourthAcountHeadResult>("EXEC @returnValue = [dbo].[Prc_Load_FourthAcountHead]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Prc_Load_ThirdAcountHeadResult>> Prc_Load_ThirdAcountHeadAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Prc_Load_ThirdAcountHeadResult>("EXEC @returnValue = [dbo].[Prc_Load_ThirdAcountHead]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Prc_LoadGrid_Acc_SubSubsidiaryLedgerResult>> Prc_LoadGrid_Acc_SubSubsidiaryLedgerAsync(string ControlLedgerCodeNo, string SubControlLedgerCodeNo, string GeneralLedgerCodeNo, string SubsidiaryLedgerCodeNo, string SubSusidiaryLedgerCodeNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ControlLedgerCodeNo",
                    Size = 100,
                    Value = ControlLedgerCodeNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SubControlLedgerCodeNo",
                    Size = 100,
                    Value = SubControlLedgerCodeNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GeneralLedgerCodeNo",
                    Size = 100,
                    Value = GeneralLedgerCodeNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SubsidiaryLedgerCodeNo",
                    Size = 100,
                    Value = SubsidiaryLedgerCodeNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SubSusidiaryLedgerCodeNo",
                    Size = 100,
                    Value = SubSusidiaryLedgerCodeNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Prc_LoadGrid_Acc_SubSubsidiaryLedgerResult>("EXEC @returnValue = [dbo].[Prc_LoadGrid_Acc_SubSubsidiaryLedger] @ControlLedgerCodeNo = @ControlLedgerCodeNo, @SubControlLedgerCodeNo = @SubControlLedgerCodeNo, @GeneralLedgerCodeNo = @GeneralLedgerCodeNo, @SubsidiaryLedgerCodeNo = @SubsidiaryLedgerCodeNo, @SubSusidiaryLedgerCodeNo = @SubSusidiaryLedgerCodeNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Prc_LoadGridCompanyOpeningBalanceResult>> Prc_LoadGridCompanyOpeningBalanceAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Prc_LoadGridCompanyOpeningBalanceResult>("EXEC @returnValue = [dbo].[Prc_LoadGridCompanyOpeningBalance]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Prc_Rpt_AccComLedgerFourthLayerResult>> Prc_Rpt_AccComLedgerFourthLayerAsync(string SubSusidiaryLedgerCodeNo, DateTime? StartDate, DateTime? EndDate, string MainCompanyCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SubSusidiaryLedgerCodeNo",
                    Size = 100,
                    Value = SubSusidiaryLedgerCodeNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MainCompanyCode",
                    Size = 100,
                    Value = MainCompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Prc_Rpt_AccComLedgerFourthLayerResult>("EXEC @returnValue = [dbo].[Prc_Rpt_AccComLedgerFourthLayer] @SubSusidiaryLedgerCodeNo = @SubSusidiaryLedgerCodeNo, @StartDate = @StartDate, @EndDate = @EndDate, @MainCompanyCode = @MainCompanyCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Prc_Rpt_AccComLedgerThirdLayerResult>> Prc_Rpt_AccComLedgerThirdLayerAsync(string GeneralLedgerCodeNo, DateTime? StartDate, DateTime? EndDate, string MainCompanyCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "GeneralLedgerCodeNo",
                    Size = 100,
                    Value = GeneralLedgerCodeNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MainCompanyCode",
                    Size = 100,
                    Value = MainCompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Prc_Rpt_AccComLedgerThirdLayerResult>("EXEC @returnValue = [dbo].[Prc_Rpt_AccComLedgerThirdLayer] @GeneralLedgerCodeNo = @GeneralLedgerCodeNo, @StartDate = @StartDate, @EndDate = @EndDate, @MainCompanyCode = @MainCompanyCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_TRGridFilerResult>> prc_TRGridFilerAsync(DateTime? FromDate, DateTime? ToDate, string BookingType, string CustomerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "BookingType",
                    Size = 100,
                    Value = BookingType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_TRGridFilerResult>("EXEC @returnValue = [dbo].[prc_TRGridFiler] @FromDate = @FromDate, @ToDate = @ToDate, @BookingType = @BookingType, @CustomerID = @CustomerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_VSGridFilerResult>> prc_VSGridFilerAsync(DateTime? FromDate, DateTime? ToDate, string BookingType, string CustomerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "BookingType",
                    Size = 100,
                    Value = BookingType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_VSGridFilerResult>("EXEC @returnValue = [dbo].[prc_VSGridFiler] @FromDate = @FromDate, @ToDate = @ToDate, @BookingType = @BookingType, @CustomerID = @CustomerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_DeleteVoucherByInvoiceAsync(string InvoiceNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "InvoiceNo",
                    Size = 100,
                    Value = InvoiceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_DeleteVoucherByInvoice] @InvoiceNo = @InvoiceNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_DeleteVoucherEntryFromDueCollectionAsync(string BillEntryNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BillEntryNo",
                    Size = 100,
                    Value = BillEntryNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_DeleteVoucherEntryFromDueCollection] @BillEntryNo = @BillEntryNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<proc_ExpenseReportResult>> proc_ExpenseReportAsync(DateTime? FromDate, DateTime? ToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<proc_ExpenseReportResult>("EXEC @returnValue = [dbo].[proc_ExpenseReport] @FromDate = @FromDate, @ToDate = @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_getCustomerInvoiceDueListResult>> Proc_getCustomerInvoiceDueListAsync(string CustomerID, string Main_CompanyCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Main_CompanyCode",
                    Size = 100,
                    Value = Main_CompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_getCustomerInvoiceDueListResult>("EXEC @returnValue = [dbo].[Proc_getCustomerInvoiceDueList] @CustomerID = @CustomerID, @Main_CompanyCode = @Main_CompanyCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_getOrderListResult>> Proc_getOrderListAsync(DateTime? FromDate, DateTime? ToDate, string BookingNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "BookingNo",
                    Size = 100,
                    Value = BookingNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_getOrderListResult>("EXEC @returnValue = [dbo].[Proc_getOrderList] @FromDate = @FromDate, @ToDate = @ToDate, @BookingNo = @BookingNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_getOrderListHeaderResult>> Proc_getOrderListHeaderAsync(DateTime? FromDate, DateTime? ToDate, string BookingNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "BookingNo",
                    Size = 100,
                    Value = BookingNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_getOrderListHeaderResult>("EXEC @returnValue = [dbo].[Proc_getOrderListHeader] @FromDate = @FromDate, @ToDate = @ToDate, @BookingNo = @BookingNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<proc_GetPatientListForLabTestResultResult>> proc_GetPatientListForLabTestResultAsync(DateTime? FromDate, DateTime? ToDate, string DoctorCode, string ReferencePersonId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DoctorCode",
                    Size = 100,
                    Value = DoctorCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferencePersonId",
                    Size = 100,
                    Value = ReferencePersonId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<proc_GetPatientListForLabTestResultResult>("EXEC @returnValue = [dbo].[proc_GetPatientListForLabTestResult] @FromDate = @FromDate, @ToDate = @ToDate, @DoctorCode = @DoctorCode, @ReferencePersonId = @ReferencePersonId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_getTransportinfowithDriverResult>> Proc_getTransportinfowithDriverAsync(string BookingNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BookingNo",
                    Size = 100,
                    Value = BookingNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_getTransportinfowithDriverResult>("EXEC @returnValue = [dbo].[Proc_getTransportinfowithDriver] @BookingNo = @BookingNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proc_getVendorListResult>> Proc_getVendorListAsync(string BookingNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BookingNo",
                    Size = 100,
                    Value = BookingNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proc_getVendorListResult>("EXEC @returnValue = [dbo].[Proc_getVendorList] @BookingNo = @BookingNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<proc_LabTestListNotInVoucherResult>> proc_LabTestListNotInVoucherAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<proc_LabTestListNotInVoucherResult>("EXEC @returnValue = [dbo].[proc_LabTestListNotInVoucher]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<proc_Select_CL_SCL_GGL_GLAndSLAllInfoResult>> proc_Select_CL_SCL_GGL_GLAndSLAllInfoAsync(string SubSusidiaryLedgerCodeNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SubSusidiaryLedgerCodeNo",
                    Size = 100,
                    Value = SubSusidiaryLedgerCodeNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<proc_Select_CL_SCL_GGL_GLAndSLAllInfoResult>("EXEC @returnValue = [dbo].[proc_Select_CL_SCL_GGL_GLAndSLAllInfo] @SubSusidiaryLedgerCodeNo = @SubSusidiaryLedgerCodeNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_VoucherEntryFromCommissionHistoryJVAsync(string Mrno, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Mrno",
                    Size = 100,
                    Value = Mrno ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_VoucherEntryFromCommissionHistoryJV] @Mrno = @Mrno", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_VoucherEntryFromCommissionPaymentPVAsync(string PaymentNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PaymentNo",
                    Size = 100,
                    Value = PaymentNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_VoucherEntryFromCommissionPaymentPV] @PaymentNo = @PaymentNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_VoucherEntryFromDueCollectionForLabTestDiscountAsync(string LabTestNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LabTestNo",
                    Size = 100,
                    Value = LabTestNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_VoucherEntryFromDueCollectionForLabTestDiscount] @LabTestNo = @LabTestNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_VoucherEntryFromDueCollectionForLabTestRVAsync(string LabTestNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LabTestNo",
                    Size = 100,
                    Value = LabTestNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_VoucherEntryFromDueCollectionForLabTestRV] @LabTestNo = @LabTestNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_VoucherEntryFromDueCollectionForPatientBillDiscountAsync(string BillEntryNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BillEntryNo",
                    Size = 100,
                    Value = BillEntryNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_VoucherEntryFromDueCollectionForPatientBillDiscount] @BillEntryNo = @BillEntryNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_VoucherEntryFromDueCollectionForPatientBillRvAsync(string BillEntryNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BillEntryNo",
                    Size = 100,
                    Value = BillEntryNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_VoucherEntryFromDueCollectionForPatientBillRv] @BillEntryNo = @BillEntryNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_VoucherEntryFromExpensePaymentPVAsync(string ExpenseCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ExpenseCode",
                    Size = 100,
                    Value = ExpenseCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_VoucherEntryFromExpensePaymentPV] @ExpenseCode = @ExpenseCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_VoucherEntryFromInPatientBillAsync(string BillEntryNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BillEntryNo",
                    Size = 100,
                    Value = BillEntryNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_VoucherEntryFromInPatientBill] @BillEntryNo = @BillEntryNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_VoucherEntryFromIPBForRVAsync(string BillEntryNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BillEntryNo",
                    Size = 100,
                    Value = BillEntryNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_VoucherEntryFromIPBForRV] @BillEntryNo = @BillEntryNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_VoucherEntryFromLabTestAsync(string LabTestNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LabTestNo",
                    Size = 100,
                    Value = LabTestNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_VoucherEntryFromLabTest] @LabTestNo = @LabTestNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Proc_VoucherEntryFromLabTestForRVAsync(string LabTestNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LabTestNo",
                    Size = 100,
                    Value = LabTestNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Proc_VoucherEntryFromLabTestForRV] @LabTestNo = @LabTestNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ProcGetEployeeFilterDetailsResult>> ProcGetEployeeFilterDetailsAsync(string CompanyCode, string BranchCode, string DivisionCode, string DepartmentCode, string DesignationCode, string EmployeeID, string EmployeeStatus, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CompanyCode",
                    Size = 50,
                    Value = CompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchCode",
                    Size = 50,
                    Value = BranchCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DivisionCode",
                    Size = 50,
                    Value = DivisionCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DepartmentCode",
                    Size = 50,
                    Value = DepartmentCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DesignationCode",
                    Size = 50,
                    Value = DesignationCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeID",
                    Size = 50,
                    Value = EmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeStatus",
                    Size = 50,
                    Value = EmployeeStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ProcGetEployeeFilterDetailsResult>("EXEC @returnValue = [dbo].[ProcGetEployeeFilterDetails] @CompanyCode = @CompanyCode, @BranchCode = @BranchCode, @DivisionCode = @DivisionCode, @DepartmentCode = @DepartmentCode, @DesignationCode = @DesignationCode, @EmployeeID = @EmployeeID, @EmployeeStatus = @EmployeeStatus", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PROCPrintingAndStationeryReportResult>> PROCPrintingAndStationeryReportAsync(string CatagoryID, string ProductID, string BrandID, string ModelID, DateOnly? FromDate, DateOnly? ToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CatagoryID",
                    Size = -1,
                    Value = CatagoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProductID",
                    Size = -1,
                    Value = ProductID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BrandID",
                    Size = -1,
                    Value = BrandID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ModelID",
                    Size = -1,
                    Value = ModelID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PROCPrintingAndStationeryReportResult>("EXEC @returnValue = [dbo].[PROCPrintingAndStationeryReport] @CatagoryID = @CatagoryID, @ProductID = @ProductID, @BrandID = @BrandID, @ModelID = @ModelID, @FromDate = @FromDate, @ToDate = @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReferenceCommissionReportResult>> ReferenceCommissionReportAsync(string CommissionReceiver, string CommissionReceiverId, DateTime? FromDate, DateTime? ToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CommissionReceiver",
                    Size = 100,
                    Value = CommissionReceiver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CommissionReceiverId",
                    Size = -1,
                    Value = CommissionReceiverId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReferenceCommissionReportResult>("EXEC @returnValue = [dbo].[ReferenceCommissionReport] @CommissionReceiver = @CommissionReceiver, @CommissionReceiverId = @CommissionReceiverId, @FromDate = @FromDate, @ToDate = @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReferenceCommissionSummaryResult>> ReferenceCommissionSummaryAsync(string CommissionReceiver, string CommissionReceiverId, DateTime? FromDate, DateTime? ToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CommissionReceiver",
                    Size = 100,
                    Value = CommissionReceiver ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CommissionReceiverId",
                    Size = 100,
                    Value = CommissionReceiverId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReferenceCommissionSummaryResult>("EXEC @returnValue = [dbo].[ReferenceCommissionSummary] @CommissionReceiver = @CommissionReceiver, @CommissionReceiverId = @CommissionReceiverId, @FromDate = @FromDate, @ToDate = @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_PatientInfoResult>> Rpt_PatientInfoAsync(string patientCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patientCode",
                    Size = 100,
                    Value = patientCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_PatientInfoResult>("EXEC @returnValue = [dbo].[Rpt_PatientInfo] @patientCode = @patientCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_BankReceiptVoucherResult>> Rpt_proc_BankReceiptVoucherAsync(string VoucherNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "VoucherNo",
                    Size = 100,
                    Value = VoucherNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_BankReceiptVoucherResult>("EXEC @returnValue = [dbo].[Rpt_proc_BankReceiptVoucher] @VoucherNo = @VoucherNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_BeforePLTotalCompanyTaxExpenseResult>> Rpt_proc_BeforePLTotalCompanyTaxExpenseAsync(DateTime? FromDate, string MainCompanyCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MainCompanyCode",
                    Size = 100,
                    Value = MainCompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_BeforePLTotalCompanyTaxExpenseResult>("EXEC @returnValue = [dbo].[Rpt_proc_BeforePLTotalCompanyTaxExpense] @FromDate = @FromDate, @MainCompanyCode = @MainCompanyCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_BeforePLTotalDirectExpenseResult>> Rpt_proc_BeforePLTotalDirectExpenseAsync(DateTime? FromDate, string MainCompanyCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MainCompanyCode",
                    Size = 100,
                    Value = MainCompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_BeforePLTotalDirectExpenseResult>("EXEC @returnValue = [dbo].[Rpt_proc_BeforePLTotalDirectExpense] @FromDate = @FromDate, @MainCompanyCode = @MainCompanyCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_BeforePLTotalDirectorRemunOthersExpenseResult>> Rpt_proc_BeforePLTotalDirectorRemunOthersExpenseAsync(DateTime? FromDate, string MainCompanyCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MainCompanyCode",
                    Size = 100,
                    Value = MainCompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_BeforePLTotalDirectorRemunOthersExpenseResult>("EXEC @returnValue = [dbo].[Rpt_proc_BeforePLTotalDirectorRemunOthersExpense] @FromDate = @FromDate, @MainCompanyCode = @MainCompanyCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_BeforePLTotalFinanceCostResult>> Rpt_proc_BeforePLTotalFinanceCostAsync(DateTime? FromDate, string MainCompanyCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MainCompanyCode",
                    Size = 100,
                    Value = MainCompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_BeforePLTotalFinanceCostResult>("EXEC @returnValue = [dbo].[Rpt_proc_BeforePLTotalFinanceCost] @FromDate = @FromDate, @MainCompanyCode = @MainCompanyCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_BeforePLTotalGeneralAdminExpenseResult>> Rpt_proc_BeforePLTotalGeneralAdminExpenseAsync(DateTime? FromDate, string MainCompanyCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MainCompanyCode",
                    Size = 100,
                    Value = MainCompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_BeforePLTotalGeneralAdminExpenseResult>("EXEC @returnValue = [dbo].[Rpt_proc_BeforePLTotalGeneralAdminExpense] @FromDate = @FromDate, @MainCompanyCode = @MainCompanyCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_BeforePLTotalManpowercostExpenseResult>> Rpt_proc_BeforePLTotalManpowercostExpenseAsync(DateTime? FromDate, string MainCompanyCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MainCompanyCode",
                    Size = 100,
                    Value = MainCompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_BeforePLTotalManpowercostExpenseResult>("EXEC @returnValue = [dbo].[Rpt_proc_BeforePLTotalManpowercostExpense] @FromDate = @FromDate, @MainCompanyCode = @MainCompanyCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_BeforePLTotalOfficeOverheadExpenseResult>> Rpt_proc_BeforePLTotalOfficeOverheadExpenseAsync(DateTime? FromDate, string MainCompanyCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MainCompanyCode",
                    Size = 100,
                    Value = MainCompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_BeforePLTotalOfficeOverheadExpenseResult>("EXEC @returnValue = [dbo].[Rpt_proc_BeforePLTotalOfficeOverheadExpense] @FromDate = @FromDate, @MainCompanyCode = @MainCompanyCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_BeforePLTotalOtherIncomeResult>> Rpt_proc_BeforePLTotalOtherIncomeAsync(DateTime? FromDate, string MainCompanyCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MainCompanyCode",
                    Size = 100,
                    Value = MainCompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_BeforePLTotalOtherIncomeResult>("EXEC @returnValue = [dbo].[Rpt_proc_BeforePLTotalOtherIncome] @FromDate = @FromDate, @MainCompanyCode = @MainCompanyCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_BeforePLTotalSalesResult>> Rpt_proc_BeforePLTotalSalesAsync(DateTime? FromDate, string MainCompanyCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MainCompanyCode",
                    Size = 100,
                    Value = MainCompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_BeforePLTotalSalesResult>("EXEC @returnValue = [dbo].[Rpt_proc_BeforePLTotalSales] @FromDate = @FromDate, @MainCompanyCode = @MainCompanyCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_BSNonCurrentAssetResult>> Rpt_proc_BSNonCurrentAssetAsync(DateTime? FromDate, DateTime? ToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_BSNonCurrentAssetResult>("EXEC @returnValue = [dbo].[Rpt_proc_BSNonCurrentAsset] @FromDate = @FromDate, @ToDate = @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_BSTotalCapitalResult>> Rpt_proc_BSTotalCapitalAsync(DateTime? FromDate, DateTime? ToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_BSTotalCapitalResult>("EXEC @returnValue = [dbo].[Rpt_proc_BSTotalCapital] @FromDate = @FromDate, @ToDate = @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_BSTotalCurrentAssetResult>> Rpt_proc_BSTotalCurrentAssetAsync(DateTime? FromDate, DateTime? ToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_BSTotalCurrentAssetResult>("EXEC @returnValue = [dbo].[Rpt_proc_BSTotalCurrentAsset] @FromDate = @FromDate, @ToDate = @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_BSTotalCurrentLiablitiesResult>> Rpt_proc_BSTotalCurrentLiablitiesAsync(DateTime? FromDate, DateTime? ToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_BSTotalCurrentLiablitiesResult>("EXEC @returnValue = [dbo].[Rpt_proc_BSTotalCurrentLiablities] @FromDate = @FromDate, @ToDate = @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_BSTotalLongLiablitiesResult>> Rpt_proc_BSTotalLongLiablitiesAsync(DateTime? FromDate, DateTime? ToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_BSTotalLongLiablitiesResult>("EXEC @returnValue = [dbo].[Rpt_proc_BSTotalLongLiablities] @FromDate = @FromDate, @ToDate = @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_Proc_DueListResult>> Rpt_Proc_DueListAsync(string BillTypeId, string PatientTypeId, DateTime? FromDate, DateTime? ToDate, string DoctorId, string ReferenceId, string Role, string LUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BillTypeId",
                    Size = 100,
                    Value = BillTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientTypeId",
                    Size = 100,
                    Value = PatientTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DoctorId",
                    Size = 100,
                    Value = DoctorId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 100,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Role",
                    Size = 100,
                    Value = Role ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LUser",
                    Size = 100,
                    Value = LUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_Proc_DueListResult>("EXEC @returnValue = [dbo].[Rpt_Proc_DueList] @BillTypeId = @BillTypeId, @PatientTypeId = @PatientTypeId, @FromDate = @FromDate, @ToDate = @ToDate, @DoctorId = @DoctorId, @ReferenceId = @ReferenceId, @Role = @Role, @LUser = @LUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_Proc_InvoiceReportResult>> Rpt_Proc_InvoiceReportAsync(string TBReceiveNO, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TBReceiveNO",
                    Size = 100,
                    Value = TBReceiveNO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_Proc_InvoiceReportResult>("EXEC @returnValue = [dbo].[Rpt_Proc_InvoiceReport] @TBReceiveNO = @TBReceiveNO", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_Proc_OutPatientPrescriptionReportResult>> Rpt_Proc_OutPatientPrescriptionReportAsync(string patientTypeCode, string doctorCode, string ReferencePersonId, string VisitingReportingFee, DateTime? fromDate, DateTime? toDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "patientTypeCode",
                    Size = 100,
                    Value = patientTypeCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doctorCode",
                    Size = 100,
                    Value = doctorCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferencePersonId",
                    Size = 100,
                    Value = ReferencePersonId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VisitingReportingFee",
                    Size = 100,
                    Value = VisitingReportingFee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fromDate",
                    Value = fromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "toDate",
                    Value = toDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_Proc_OutPatientPrescriptionReportResult>("EXEC @returnValue = [dbo].[Rpt_Proc_OutPatientPrescriptionReport] @patientTypeCode = @patientTypeCode, @doctorCode = @doctorCode, @ReferencePersonId = @ReferencePersonId, @VisitingReportingFee = @VisitingReportingFee, @fromDate = @fromDate, @toDate = @toDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_PLTotalCompanyTaxExpenseResult>> Rpt_proc_PLTotalCompanyTaxExpenseAsync(DateTime? FromDate, DateTime? ToDate, string MainCompanyCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MainCompanyCode",
                    Size = 100,
                    Value = MainCompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_PLTotalCompanyTaxExpenseResult>("EXEC @returnValue = [dbo].[Rpt_proc_PLTotalCompanyTaxExpense] @FromDate = @FromDate, @ToDate = @ToDate, @MainCompanyCode = @MainCompanyCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_PLTotalDirectExpenseResult>> Rpt_proc_PLTotalDirectExpenseAsync(DateTime? FromDate, DateTime? ToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_PLTotalDirectExpenseResult>("EXEC @returnValue = [dbo].[Rpt_proc_PLTotalDirectExpense] @FromDate = @FromDate, @ToDate = @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_PLTotalDirectorRemunOthersExpenseResult>> Rpt_proc_PLTotalDirectorRemunOthersExpenseAsync(DateTime? FromDate, DateTime? ToDate, string MainCompanyCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MainCompanyCode",
                    Size = 100,
                    Value = MainCompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_PLTotalDirectorRemunOthersExpenseResult>("EXEC @returnValue = [dbo].[Rpt_proc_PLTotalDirectorRemunOthersExpense] @FromDate = @FromDate, @ToDate = @ToDate, @MainCompanyCode = @MainCompanyCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_PLTotalFinanceCostResult>> Rpt_proc_PLTotalFinanceCostAsync(DateTime? FromDate, DateTime? ToDate, string MainCompanyCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MainCompanyCode",
                    Size = 100,
                    Value = MainCompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_PLTotalFinanceCostResult>("EXEC @returnValue = [dbo].[Rpt_proc_PLTotalFinanceCost] @FromDate = @FromDate, @ToDate = @ToDate, @MainCompanyCode = @MainCompanyCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_PLTotalGeneralAdminExpenseResult>> Rpt_proc_PLTotalGeneralAdminExpenseAsync(DateTime? FromDate, DateTime? ToDate, string MainCompanyCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MainCompanyCode",
                    Size = 100,
                    Value = MainCompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_PLTotalGeneralAdminExpenseResult>("EXEC @returnValue = [dbo].[Rpt_proc_PLTotalGeneralAdminExpense] @FromDate = @FromDate, @ToDate = @ToDate, @MainCompanyCode = @MainCompanyCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_PLTotalInDirectExpenseResult>> Rpt_proc_PLTotalInDirectExpenseAsync(DateTime? FromDate, DateTime? ToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_PLTotalInDirectExpenseResult>("EXEC @returnValue = [dbo].[Rpt_proc_PLTotalInDirectExpense] @FromDate = @FromDate, @ToDate = @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_PLTotalManpowercostExpenseResult>> Rpt_proc_PLTotalManpowercostExpenseAsync(DateTime? FromDate, DateTime? ToDate, string MainCompanyCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MainCompanyCode",
                    Size = 100,
                    Value = MainCompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_PLTotalManpowercostExpenseResult>("EXEC @returnValue = [dbo].[Rpt_proc_PLTotalManpowercostExpense] @FromDate = @FromDate, @ToDate = @ToDate, @MainCompanyCode = @MainCompanyCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_PLTotalOfficeOverheadExpenseResult>> Rpt_proc_PLTotalOfficeOverheadExpenseAsync(DateTime? FromDate, DateTime? ToDate, string MainCompanyCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MainCompanyCode",
                    Size = 100,
                    Value = MainCompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_PLTotalOfficeOverheadExpenseResult>("EXEC @returnValue = [dbo].[Rpt_proc_PLTotalOfficeOverheadExpense] @FromDate = @FromDate, @ToDate = @ToDate, @MainCompanyCode = @MainCompanyCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_PLTotalOtherIncomeResult>> Rpt_proc_PLTotalOtherIncomeAsync(DateTime? FromDate, DateTime? ToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_PLTotalOtherIncomeResult>("EXEC @returnValue = [dbo].[Rpt_proc_PLTotalOtherIncome] @FromDate = @FromDate, @ToDate = @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_PLTotalSalesResult>> Rpt_proc_PLTotalSalesAsync(DateTime? FromDate, DateTime? ToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_PLTotalSalesResult>("EXEC @returnValue = [dbo].[Rpt_proc_PLTotalSales] @FromDate = @FromDate, @ToDate = @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_Proc_SalesCollectionResult>> Rpt_Proc_SalesCollectionAsync(string BillTypeId, string PatientTypeId, DateTime? FromDate, DateTime? ToDate, string BillStatus, string DoctorId, string ReferenceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BillTypeId",
                    Size = 100,
                    Value = BillTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientTypeId",
                    Size = 100,
                    Value = PatientTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "BillStatus",
                    Size = 100,
                    Value = BillStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DoctorId",
                    Size = 100,
                    Value = DoctorId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 100,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_Proc_SalesCollectionResult>("EXEC @returnValue = [dbo].[Rpt_Proc_SalesCollection] @BillTypeId = @BillTypeId, @PatientTypeId = @PatientTypeId, @FromDate = @FromDate, @ToDate = @ToDate, @BillStatus = @BillStatus, @DoctorId = @DoctorId, @ReferenceId = @ReferenceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_Proc_SalesCollectionForUserResult>> Rpt_Proc_SalesCollectionForUserAsync(string BillTypeId, string PatientTypeId, DateTime? FromDate, DateTime? ToDate, string BillStatus, string DoctorId, string ReferenceId, string EmployeeId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BillTypeId",
                    Size = 100,
                    Value = BillTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientTypeId",
                    Size = 100,
                    Value = PatientTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "BillStatus",
                    Size = 100,
                    Value = BillStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DoctorId",
                    Size = 100,
                    Value = DoctorId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 100,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeId",
                    Size = 100,
                    Value = EmployeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_Proc_SalesCollectionForUserResult>("EXEC @returnValue = [dbo].[Rpt_Proc_SalesCollectionForUser] @BillTypeId = @BillTypeId, @PatientTypeId = @PatientTypeId, @FromDate = @FromDate, @ToDate = @ToDate, @BillStatus = @BillStatus, @DoctorId = @DoctorId, @ReferenceId = @ReferenceId, @EmployeeId = @EmployeeId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_proc_TrialBalanceReportF2Result>> Rpt_proc_TrialBalanceReportF2Async(DateTime? ToDate, string MainCompanyCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MainCompanyCode",
                    Size = 100,
                    Value = MainCompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_proc_TrialBalanceReportF2Result>("EXEC @returnValue = [dbo].[Rpt_proc_TrialBalanceReportF2] @ToDate = @ToDate, @MainCompanyCode = @MainCompanyCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_ProReceiveAndPaymentResult>> Rpt_ProReceiveAndPaymentAsync(string CompanyCode, DateTime? FromDate, DateTime? ToDate, string Role, string LUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CompanyCode",
                    Size = 100,
                    Value = CompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Role",
                    Size = 100,
                    Value = Role ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LUser",
                    Size = 100,
                    Value = LUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_ProReceiveAndPaymentResult>("EXEC @returnValue = [dbo].[Rpt_ProReceiveAndPayment] @CompanyCode = @CompanyCode, @FromDate = @FromDate, @ToDate = @ToDate, @Role = @Role, @LUser = @LUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Rpt_ProReceiveAndPaymentWithOutOpeningResult>> Rpt_ProReceiveAndPaymentWithOutOpeningAsync(string CompanyCode, DateTime? FromDate, DateTime? ToDate, string Role, string LUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CompanyCode",
                    Size = 100,
                    Value = CompanyCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Role",
                    Size = 100,
                    Value = Role ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LUser",
                    Size = 100,
                    Value = LUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Rpt_ProReceiveAndPaymentWithOutOpeningResult>("EXEC @returnValue = [dbo].[Rpt_ProReceiveAndPaymentWithOutOpening] @CompanyCode = @CompanyCode, @FromDate = @FromDate, @ToDate = @ToDate, @Role = @Role, @LUser = @LUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SalesReportResult>> SalesReportAsync(string BillTypeId, string PatientTypeId, DateTime? FromDate, DateTime? ToDate, string DoctorId, string ReferenceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BillTypeId",
                    Size = 100,
                    Value = BillTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientTypeId",
                    Size = 100,
                    Value = PatientTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DoctorId",
                    Size = 100,
                    Value = DoctorId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 100,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SalesReportResult>("EXEC @returnValue = [dbo].[SalesReport] @BillTypeId = @BillTypeId, @PatientTypeId = @PatientTypeId, @FromDate = @FromDate, @ToDate = @ToDate, @DoctorId = @DoctorId, @ReferenceId = @ReferenceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SalesReportForUserResult>> SalesReportForUserAsync(string BillTypeId, string PatientTypeId, DateTime? FromDate, DateTime? ToDate, string DoctorId, string ReferenceId, string EmployeeId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BillTypeId",
                    Size = 100,
                    Value = BillTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientTypeId",
                    Size = 100,
                    Value = PatientTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DoctorId",
                    Size = 100,
                    Value = DoctorId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 100,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeId",
                    Size = 100,
                    Value = EmployeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SalesReportForUserResult>("EXEC @returnValue = [dbo].[SalesReportForUser] @BillTypeId = @BillTypeId, @PatientTypeId = @PatientTypeId, @FromDate = @FromDate, @ToDate = @ToDate, @DoctorId = @DoctorId, @ReferenceId = @ReferenceId, @EmployeeId = @EmployeeId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_BackupdbAsync(string Address, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Address",
                    Size = -1,
                    Value = Address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Backupdb] @Address = @Address", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_GetEmployeesByEmployeeIDsResult>> SP_GetEmployeesByEmployeeIDsAsync(string EmployeeIDs, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmployeeIDs",
                    Size = -1,
                    Value = EmployeeIDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_GetEmployeesByEmployeeIDsResult>("EXEC @returnValue = [dbo].[SP_GetEmployeesByEmployeeIDs] @EmployeeIDs = @EmployeeIDs", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_HRM_AdvancePayFilterDataResult>> SP_HRM_AdvancePayFilterDataAsync(string CompanyCodes, string BranchCodes, string DepartmentCodes, string DesignationCodes, string EmployeeIDs, string PayHeadIDs, string MonthIDs, string YearIDs, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CompanyCodes",
                    Size = -1,
                    Value = CompanyCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchCodes",
                    Size = -1,
                    Value = BranchCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DepartmentCodes",
                    Size = -1,
                    Value = DepartmentCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DesignationCodes",
                    Size = -1,
                    Value = DesignationCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeIDs",
                    Size = -1,
                    Value = EmployeeIDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PayHeadIDs",
                    Size = -1,
                    Value = PayHeadIDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MonthIDs",
                    Size = -1,
                    Value = MonthIDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "YearIDs",
                    Size = -1,
                    Value = YearIDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_HRM_AdvancePayFilterDataResult>("EXEC @returnValue = [dbo].[SP_HRM_AdvancePayFilterData] @CompanyCodes = @CompanyCodes, @BranchCodes = @BranchCodes, @DepartmentCodes = @DepartmentCodes, @DesignationCodes = @DesignationCodes, @EmployeeIDs = @EmployeeIDs, @PayHeadIDs = @PayHeadIDs, @MonthIDs = @MonthIDs, @YearIDs = @YearIDs", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_HRM_AdvancePayReportResult>> SP_HRM_AdvancePayReportAsync(string CompanyCodes, string BranchCodes, string DepartmentCodes, string DesignationCodes, string EmployeeIDs, string PayHeadIDs, string MonthIDs, string YearIDs, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CompanyCodes",
                    Size = -1,
                    Value = CompanyCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchCodes",
                    Size = -1,
                    Value = BranchCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DepartmentCodes",
                    Size = -1,
                    Value = DepartmentCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DesignationCodes",
                    Size = -1,
                    Value = DesignationCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeIDs",
                    Size = -1,
                    Value = EmployeeIDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PayHeadIDs",
                    Size = -1,
                    Value = PayHeadIDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MonthIDs",
                    Size = -1,
                    Value = MonthIDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "YearIDs",
                    Size = -1,
                    Value = YearIDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_HRM_AdvancePayReportResult>("EXEC @returnValue = [dbo].[SP_HRM_AdvancePayReport] @CompanyCodes = @CompanyCodes, @BranchCodes = @BranchCodes, @DepartmentCodes = @DepartmentCodes, @DesignationCodes = @DesignationCodes, @EmployeeIDs = @EmployeeIDs, @PayHeadIDs = @PayHeadIDs, @MonthIDs = @MonthIDs, @YearIDs = @YearIDs", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VoucherEntryForCollectionReceivedbankResult>> VoucherEntryForCollectionReceivedbankAsync(string CustomerID, string PaymentReceiveID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PaymentReceiveID",
                    Size = 100,
                    Value = PaymentReceiveID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VoucherEntryForCollectionReceivedbankResult>("EXEC @returnValue = [dbo].[VoucherEntryForCollectionReceivedbank] @CustomerID = @CustomerID, @PaymentReceiveID = @PaymentReceiveID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VoucherEntryForCollectionReceivedCashResult>> VoucherEntryForCollectionReceivedCashAsync(string CustomerID, string PaymentReceiveID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PaymentReceiveID",
                    Size = 100,
                    Value = PaymentReceiveID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VoucherEntryForCollectionReceivedCashResult>("EXEC @returnValue = [dbo].[VoucherEntryForCollectionReceivedCash] @CustomerID = @CustomerID, @PaymentReceiveID = @PaymentReceiveID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VoucherEntryForTransportApprovedResult>> VoucherEntryForTransportApprovedAsync(string CustomerID, string InvoiceNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InvoiceNo",
                    Size = 100,
                    Value = InvoiceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VoucherEntryForTransportApprovedResult>("EXEC @returnValue = [dbo].[VoucherEntryForTransportApproved] @CustomerID = @CustomerID, @InvoiceNo = @InvoiceNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkingExperienceReportSPResult>> WorkingExperienceReportSPAsync(string DepartmentCodes, string DesignationCodes, string EmployeeCodes, string BranchCodes, string CompanyCodes, string NationalIDNO, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DepartmentCodes",
                    Size = 100,
                    Value = DepartmentCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DesignationCodes",
                    Size = 100,
                    Value = DesignationCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeCodes",
                    Size = 100,
                    Value = EmployeeCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchCodes",
                    Size = 100,
                    Value = BranchCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyCodes",
                    Size = 100,
                    Value = CompanyCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NationalIDNO",
                    Size = 100,
                    Value = NationalIDNO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkingExperienceReportSPResult>("EXEC @returnValue = [dbo].[WorkingExperienceReportSP] @DepartmentCodes = @DepartmentCodes, @DesignationCodes = @DesignationCodes, @EmployeeCodes = @EmployeeCodes, @BranchCodes = @BranchCodes, @CompanyCodes = @CompanyCodes, @NationalIDNO = @NationalIDNO", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
